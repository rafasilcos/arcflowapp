// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ===== ARCFLOW DATABASE SCHEMA =====
// Otimizado para 10.000 usu√°rios simult√¢neos
// Sistema SaaS para escrit√≥rios de Arquitetura, Engenharia e Constru√ß√£o

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm]
}

// ===== AUTENTICA√á√ÉO E USU√ÅRIOS =====

// Enum para cargos profissionais (forma√ß√£o)
enum CargoProfissional {
  ARQUITETO
  ENGENHEIRO_CIVIL
  ENGENHEIRO_ELETRICO
  ENGENHEIRO_MECANICO
  ENGENHEIRO_ESTRUTURAL
  ENGENHEIRO_SANITARIO
  DESIGNER_INTERIORES
  DESIGNER_GRAFICO
  URBANISTA
  PAISAGISTA
  TECNICO_EDIFICACOES
  TECNICO_SEGURANCA
  ADMINISTRADOR
  CONTADOR
  ADVOGADO
  ESTAGIARIO
  AUXILIAR_TECNICO
  OUTROS
}

// Enum para fun√ß√µes na organiza√ß√£o (papel na equipe)
enum FuncaoOrganizacional {
  PROPRIETARIO
  DIRETOR
  GERENTE_GERAL
  COORDENADOR_PROJETOS
  COORDENADOR_OBRAS
  COORDENADOR_ADMINISTRATIVO
  COORDENADOR_FINANCEIRO
  ARQUITETO_RESPONSAVEL
  ENGENHEIRO_RESPONSAVEL
  PROJETISTA_SENIOR
  PROJETISTA_JUNIOR
  ANALISTA_FINANCEIRO
  ASSISTENTE_ADMINISTRATIVO
  ASSISTENTE_TECNICO
  ESTAGIARIO
  CONSULTOR
  TERCEIRIZADO
  COLABORADOR
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  avatar      String?
  password    String
  role        UserRole @default(USER)
  
  // Novo campo para separar cargo de fun√ß√£o
  cargo       CargoProfissional? // Forma√ß√£o profissional
  funcao      FuncaoOrganizacional? // Papel na organiza√ß√£o
  
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  escritorio   Escritorio? @relation(fields: [escritorioId], references: [id], onDelete: Cascade)
  escritorioId String?

  // Projetos que o usu√°rio participa
  projetoUsers ProjetoUser[]
  
  // Atividades do usu√°rio
  atividades   Atividade[]
  
  // Sess√µes ativas
  sessions     UserSession[]
  
  // Notifica√ß√µes
  notificacoes Notificacao[]
  
  // Convites enviados
  convitesEnviados Convite[]
  
  // Briefings respons√°veis
  briefingsResponsavel Briefing[] @relation("BriefingResponsavel")

  // Or√ßamentos respons√°veis
  // orcamentosResponsavel Orcamento[]

  @@index([email])
  @@index([escritorioId])
  @@index([role])
  @@index([cargo])
  @@index([funcao])
  @@map("users")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([refreshToken])
  @@map("user_sessions")
}

enum UserRole {
  ADMIN
  OWNER
  MANAGER
  ARCHITECT
  ENGINEER
  DESIGNER
  USER
}

// ===== ESCRIT√ìRIOS =====

model Escritorio {
  id          String   @id @default(cuid())
  nome        String
  cnpj        String?  @unique
  email       String
  telefone    String?
  endereco    String?
  cidade      String?
  estado      String?
  cep         String?
  website     String?
  logo        String?
  isActive    Boolean  @default(true)
  plano       PlanoType @default(BASIC)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users       User[]
  projetos    Projeto[]
  clientes    Cliente[]
  templates   Template[]
  convites    Convite[]
  briefings   Briefing[]
  // orcamentos  Orcamento[]
  
  @@index([cnpj])
  @@index([plano])
  @@map("escritorios")
}

enum PlanoType {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

// ===== CLIENTES =====

model Cliente {
  id                String   @id
  nome              String
  email             String   @unique
  telefone          String?
  tipoPessoa        String?  @map("tipo_pessoa") // 'fisica' ou 'juridica'
  cpf               String?
  cnpj              String?
  profissao         String?
  dataNascimento    DateTime? @map("data_nascimento")
  dataFundacao      DateTime? @map("data_fundacao")
  
  // Endere√ßo (campos separados)
  enderecoCep         String? @map("endereco_cep")
  enderecoLogradouro  String? @map("endereco_logradouro")
  enderecoNumero      String? @map("endereco_numero")
  enderecoComplemento String? @map("endereco_complemento")
  enderecoBairro      String? @map("endereco_bairro")
  enderecoCidade      String? @map("endereco_cidade")
  enderecoUf          String? @map("endereco_uf")
  enderecoPais        String? @map("endereco_pais") @default("Brasil")
  
  // Dados complexos (JSON)
  familia           Json?
  origem            Json?
  preferencias      Json?
  historicoProjetos Json? @map("historico_projetos")
  
  observacoes       String?
  status            String   @default("ativo") // 'ativo', 'inativo', 'vip', 'problema'
  isActive          Boolean  @map("is_active") @default(true)
  deletedAt         DateTime? @map("deleted_at")
  createdBy         String?  @map("created_by")
  updatedBy         String?  @map("updated_by")
  deletedBy         String?  @map("deleted_by")
  createdAt         DateTime @map("created_at") @default(now())
  updatedAt         DateTime @map("updated_at") @updatedAt

  // Relacionamentos
  escritorio   Escritorio @relation(fields: [escritorioId], references: [id], onDelete: Cascade)
  escritorioId String     @map("escritorio_id")
  
  projetos     Projeto[]
  briefings    Briefing[]
  briefingsCompostos BriefingComposto[]
  // orcamentos   Orcamento[]

  @@index([escritorioId])
  @@index([email])
  @@index([cpf])
  @@index([cnpj])
  @@index([status])
  @@index([deletedAt])
  @@index([isActive])
  @@map("clientes")
}

// ===== PROJETOS =====

model Projeto {
  id          String        @id @default(cuid())
  nome        String
  descricao   String?
  tipologia   TipologiaType
  status      StatusProjeto @default(BRIEFING)
  prioridade  PrioridadeType @default(MEDIA)
  
  // Datas
  dataInicio  DateTime?
  dataFim     DateTime?
  prazoFinal  DateTime?
  
  // Financeiro
  orcamento   Decimal?
  valorTotal  Decimal?
  
  // Localiza√ß√£o
  endereco    String?
  cidade      String?
  estado      String?
  
  // Metadata
  observacoes String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos existentes
  escritorio   Escritorio @relation(fields: [escritorioId], references: [id], onDelete: Cascade)
  escritorioId String
  
  cliente      Cliente @relation(fields: [clienteId], references: [id])
  clienteId    String
  
  // Equipe do projeto
  projetoUsers ProjetoUser[]
  
  // Briefings do projeto (rela√ß√£o many-to-many)
  briefings    Briefing[] @relation("ProjetoBriefings")
  
  // Briefing Composto (novo modelo)
  briefingComposto BriefingComposto?
  
  // Atividades
  atividades   Atividade[]
  
  // Arquivos
  arquivos     Arquivo[]
  
  // Cron√¥metro
  cronometros  Cronometro[]
  
  // Nova rela√ß√£o para Templates Din√¢micos
  projetoComposto ProjetoComposto?
  
  // Or√ßamentos do projeto
  // orcamentos   Orcamento[]

  @@index([escritorioId])
  @@index([clienteId])
  @@index([status])
  @@index([tipologia])
  @@index([prioridade])
  @@map("projetos")
}

model ProjetoUser {
  id        String @id @default(cuid())
  userId    String
  projetoId String
  role      ProjetoRole @default(COLABORADOR)
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projetoId])
  @@index([userId])
  @@index([projetoId])
  @@map("projeto_users")
}

enum TipologiaType {
  RESIDENCIAL
  COMERCIAL
  INDUSTRIAL
  INSTITUCIONAL
  URBANISMO
  INTERIORES
  PAISAGISMO
}

enum StatusProjeto {
  BRIEFING
  CONCEITUAL
  ANTEPROJETO
  EXECUTIVO
  APROVACAO
  EXECUCAO
  CONCLUIDO
  CANCELADO
}

enum PrioridadeType {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum ProjetoRole {
  RESPONSAVEL
  COLABORADOR
  CONSULTOR
}

// ===== BRIEFING =====

model Briefing {
  id          String   @id @default(cuid())
  nomeProjeto String   @map("nome_projeto")
  descricao   String?
  objetivos   String?
  prazo       String?
  orcamento   String?
  status      StatusBriefing @default(EM_ANDAMENTO)
  progresso   Int      @default(0) // 0-100
  versao      Int      @default(1)
  aprovado    Boolean  @default(false)
  aprovadoEm  DateTime? @map("aprovado_em")
  observacoes String?
  
  // üéØ NOVOS CAMPOS PARA SELE√á√ÉO CORRETA DE TEMPLATES
  disciplina  String?  // "arquitetura", "estrutural", "instalacoes", etc.
  area        String?  // "residencial", "comercial", "industrial", etc.
  tipologia   String?  // "unifamiliar", "lojas", "escritorios", etc.
  
  // NOVO CAMPO: Estrutura completa do briefing personaliz√°vel
  estruturaBriefing Json? @map("estrutura_briefing")
  
  deletedAt   DateTime? @map("deleted_at")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  projeto   Projeto? @relation("ProjetoBriefings", fields: [projetoId], references: [id], onDelete: SetNull)
  projetoId String?  @map("projeto_id")
  
  cliente   Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId String  @map("cliente_id")
  
  responsavel   User @relation("BriefingResponsavel", fields: [responsavelId], references: [id])
  responsavelId String @map("responsavel_id")
  
  escritorio   Escritorio @relation(fields: [escritorioId], references: [id], onDelete: Cascade)
  escritorioId String     @map("escritorio_id")
  
  // Templates de briefing associados
  templates BriefingTemplate[]
  respostas BriefingResposta[]
  
  // Or√ßamentos gerados a partir deste briefing
  // orcamentos Orcamento[]

  @@index([escritorioId])
  @@index([clienteId])
  @@index([responsavelId])
  @@index([status])
  @@index([deletedAt])
  @@index([disciplina])
  @@index([area])
  @@index([tipologia])
  @@map("briefings")
}

model BriefingTemplate {
  id          String   @id @default(cuid())
  templateId  String   @map("template_id") // ID do tipo de briefing (ex: "residencial-unifamiliar")
  nome        String
  categoria   String   // "residencial", "comercial", "estrutural", etc.
  status      StatusBriefingTemplate @default(PENDENTE)
  progresso   Int      @default(0) // 0-100
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamento com briefing principal
  briefing   Briefing @relation(fields: [briefingId], references: [id], onDelete: Cascade)
  briefingId String   @map("briefing_id")
  
  // Perguntas do template
  perguntas BriefingPergunta[]
  respostas BriefingResposta[]

  @@index([briefingId])
  @@index([templateId])
  @@index([categoria])
  @@index([status])
  @@map("briefing_templates")
}

model BriefingPergunta {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String?
  tipo        TipoPergunta // 'texto', 'textarea', 'multipla_escolha', 'numero', 'data'
  obrigatoria Boolean  @default(false)
  opcoes      String[] // Para perguntas de m√∫ltipla escolha
  ordem       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relacionamento com template
  template   BriefingTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String           @map("template_id")
  
  // Respostas desta pergunta
  respostas BriefingResposta[]

  @@index([templateId])
  @@index([ordem])
  @@map("briefing_perguntas")
}

model BriefingResposta {
  id                 String   @id @default(cuid())
  resposta           String
  createdBy          String   @map("created_by")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  briefing           Briefing @relation(fields: [briefingId], references: [id], onDelete: Cascade)
  briefingId         String   @map("briefing_id")
  
  template           BriefingTemplate @relation(fields: [briefingTemplateId], references: [id], onDelete: Cascade)
  briefingTemplateId String           @map("briefing_template_id")
  
  pergunta           BriefingPergunta @relation(fields: [perguntaId], references: [id], onDelete: Cascade)
  perguntaId         String           @map("pergunta_id")

  @@unique([briefingId, briefingTemplateId, perguntaId])
  @@index([briefingId])
  @@index([briefingTemplateId])
  @@index([perguntaId])
  @@map("briefing_respostas")
}

enum StatusBriefing {
  EM_ANDAMENTO         // Briefing sendo preenchido (padr√£o)
  CONCLUIDO            // Briefing finalizado ‚Üí Gera or√ßamento
  EM_EDICAO            // Cliente solicitou altera√ß√µes
  ORCAMENTO_ELABORACAO // Briefing foi para or√ßamento
  PROJETO_INICIADO     // Or√ßamento aprovado ‚Üí Projeto iniciado
  
  // Status legados para compatibilidade (remover depois)
  RASCUNHO
  PENDENTE
  APROVADO
  REJEITADO
  EXCLUIDO
}

enum StatusBriefingTemplate {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDO
}

enum TipoPergunta {
  TEXTO
  TEXTAREA
  MULTIPLA_ESCOLHA
  NUMERO
  DATA
  ARQUIVO
}

// ===== TEMPLATES =====

model Template {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  tipologia   TipologiaType
  dados       Json     // Estrutura do template
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Campos para Templates Din√¢micos
  categoria     String?   // 'arquitetura' | 'estrutural' | 'instalacoes' | 'paisagismo' | 'interiores'
  isComposto    Boolean   @default(false) // Se pode ser combinado com outros templates
  compativel    String[]  // IDs de templates compat√≠veis
  conflitos     String[]  // IDs de templates que conflitam
  complexidade  String    @default("media") // 'baixa' | 'media' | 'alta' | 'critica'
  tempoEstimado Int?      // Tempo estimado total do template em minutos
  numeroTarefas Int?      // N√∫mero de tarefas/atividades do template
  versao        String    @default("1.0") // Vers√£o do template
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos existentes
  escritorio   Escritorio @relation(fields: [escritorioId], references: [id], onDelete: Cascade)
  escritorioId String
  
  // Novas rela√ß√µes para Templates Din√¢micos
  atividades     TemplateAtividade[] // Atividades do template
  regrasDeteccao RegraDeteccao[]     // Regras de detec√ß√£o autom√°tica

  @@index([escritorioId])
  @@index([tipologia])
  @@index([isPublic])
  @@index([categoria])
  @@index([isComposto])
  @@index([complexidade])
  @@map("templates")
}

// ===== ATIVIDADES E CRON√îMETRO =====

model Atividade {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String?
  tipo        TipoAtividade
  status      StatusAtividade @default(PENDENTE)
  prioridade  PrioridadeType @default(MEDIA)
  
  // Tempo
  tempoEstimado Int?     // em minutos
  tempoGasto    Int?     // em minutos
  
  // Datas
  dataInicio    DateTime?
  dataFim       DateTime?
  prazo         DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  projeto   Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId String
  
  user      User @relation(fields: [userId], references: [id])
  userId    String
  
  cronometros Cronometro[]

  @@index([projetoId])
  @@index([userId])
  @@index([status])
  @@index([tipo])
  @@map("atividades")
}

model Cronometro {
  id          String   @id @default(cuid())
  inicio      DateTime
  fim         DateTime?
  duracao     Int?     // em segundos
  observacoes String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relacionamentos
  projeto     Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId   String
  
  atividade   Atividade? @relation(fields: [atividadeId], references: [id])
  atividadeId String?

  @@index([projetoId])
  @@index([atividadeId])
  @@index([inicio])
  @@map("cronometros")
}

enum TipoAtividade {
  BRIEFING
  CONCEPCAO
  DESENHO
  DETALHAMENTO
  APROVACAO
  REVISAO
  REUNIAO
  PESQUISA
  CALCULO
  DOCUMENTACAO
}

enum StatusAtividade {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDA
  CANCELADA
}

// ===== ARQUIVOS =====

model Arquivo {
  id          String   @id @default(cuid())
  nome        String
  nomeOriginal String
  tipo        String
  tamanho     Int
  url         String
  pasta       String?
  versao      Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  projeto   Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId String

  @@index([projetoId])
  @@index([tipo])
  @@index([pasta])
  @@map("arquivos")
}

// ===== NOTIFICA√á√ïES =====

model Notificacao {
  id          String   @id @default(cuid())
  titulo      String
  mensagem    String
  tipo        TipoNotificacao
  lida        Boolean  @default(false)
  url         String?
  createdAt   DateTime @default(now())

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@index([lida])
  @@index([tipo])
  @@map("notificacoes")
}

enum TipoNotificacao {
  INFO
  SUCESSO
  AVISO
  ERRO
  PRAZO
  APROVACAO
  MENSAGEM
}

// ===== CONFIGURA√á√ïES =====

model Configuracao {
  id          String   @id @default(cuid())
  chave       String   @unique
  valor       Json
  descricao   String?
  categoria   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chave])
  @@index([categoria])
  @@map("configuracoes")
}

// ===== SISTEMA DE TEMPLATES DIN√ÇMICOS =====

// Projeto Composto - projetos que combinam m√∫ltiplos templates
model ProjetoComposto {
  id              String   @id @default(cuid())
  projetoId       String   @unique
  tipoComposicao  String   // 'automatica' | 'manual'
  templateIds     String[] // Array de templates aplicados
  dependencias    Json     // Mapeamento de depend√™ncias entre templates
  cronograma      Json     // Cronograma gerado automaticamente
  orcamento       Json     // Or√ßamento consolidado por categoria
  configuracao    Json     // Configura√ß√µes espec√≠ficas do projeto
  metadados       Json?    // Dados adicionais para an√°lise
  totalTarefas    Int?     // N√∫mero total de tarefas geradas
  tempoEstimado   Int?     // Tempo estimado total em minutos
  complexidade    String?  // 'baixa' | 'media' | 'alta' | 'critica'
  status          String   @default("ativo") // 'ativo' | 'pausado' | 'concluido'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  projeto Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  
  @@index([projetoId])
  @@index([tipoComposicao])
  @@index([status])
  @@index([complexidade])
  @@map("projetos_compostos")
}

// Mapeamento Template ‚Üí Atividades (templates de atividades reutiliz√°veis)
model TemplateAtividade {
  id            String   @id @default(cuid())
  templateId    String
  titulo        String
  descricao     String?
  tipo          TipoAtividade
  categoria     String   // 'arquitetura' | 'estrutural' | 'instalacoes' | 'paisagismo' | 'interiores'
  subcategoria  String?  // Subcategoria espec√≠fica
  ordem         Int      // Ordem de execu√ß√£o dentro do template
  dependencias  String[] // IDs de atividades que devem ser conclu√≠das primeiro
  tempoEstimado Int?     // Tempo estimado em minutos
  complexidade  String   @default("media") // 'baixa' | 'media' | 'alta'
  obrigatoria   Boolean  @default(true)    // Se a atividade √© obrigat√≥ria
  condicional   Json?    // Condi√ß√µes para ativa√ß√£o da atividade
  recursos      Json?    // Recursos necess√°rios para a atividade
  entregaveis   Json?    // Lista de entreg√°veis da atividade
  
  // Metadata para otimiza√ß√£o
  frequenciaUso Int      @default(0) // Quantas vezes foi utilizada
  tempoMedio    Int?     // Tempo m√©dio real de execu√ß√£o
  taxaSucesso   Float?   // Taxa de conclus√£o dentro do prazo
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
  @@index([tipo])
  @@index([categoria])
  @@index([ordem])
  @@index([obrigatoria])
  @@map("template_atividades")
}

// Regras de Detec√ß√£o de Necessidades (motor de IA para composi√ß√£o autom√°tica)
model RegraDeteccao {
  id              String   @id @default(cuid())
  nome            String
  descricao       String?
  categoria       String   // 'residencial' | 'comercial' | 'industrial' | 'institucional'
  condicao        Json     // Condi√ß√µes do briefing para ativar template
  templateId      String   // Template a ser aplicado quando condi√ß√£o for verdadeira
  prioridade      Int      @default(1) // Prioridade de aplica√ß√£o (1 = maior)
  peso            Float    @default(1.0) // Peso na decis√£o de composi√ß√£o
  isActive        Boolean  @default(true)
  isAutomatica    Boolean  @default(true) // Se aplica automaticamente ou sugere
  
  // Configura√ß√µes avan√ßadas
  minimumScore    Float?   @default(0.7) // Score m√≠nimo para ativa√ß√£o autom√°tica
  conflitos       String[] // IDs de templates que conflitam com este
  dependeTemplates String[] // Templates que devem ser inclu√≠dos junto
  
  // M√©tricas de performance
  vezesAplicada   Int      @default(0) // Quantas vezes foi aplicada
  taxaAcerto      Float?   // Taxa de acerto da regra
  feedbackUsuario Json?    // Feedback dos usu√°rios sobre a regra
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@index([templateId])
  @@index([categoria])
  @@index([prioridade])
  @@index([isActive])
  @@index([isAutomatica])
  @@map("regras_deteccao")
}

// Log de Composi√ß√µes para an√°lise e otimiza√ß√£o
model LogComposicao {
  id              String   @id @default(cuid())
  projetoId       String
  briefingData    Json     // Dados do briefing que geraram a composi√ß√£o
  templatesDetectados Json // Templates detectados automaticamente
  templatesAplicados Json  // Templates efetivamente aplicados
  regrasAplicadas String[] // IDs das regras que foram ativadas
  tempoProcessamento Int?   // Tempo de processamento em ms
  scoreConfianca  Float?   // Score de confian√ßa da composi√ß√£o
  feedbackUsuario String?  // 'aceito' | 'rejeitado' | 'modificado'
  observacoes     String?
  createdAt       DateTime @default(now())

  @@index([projetoId])
  @@index([feedbackUsuario])
  @@index([createdAt])
  @@map("logs_composicao")
}

// ===== BRIEFING COMPOSTO - NOVA ESTRUTURA =====

// Briefing principal composto (substitui o modelo simples)
model BriefingComposto {
  id          String   @id @default(cuid())
  nome        String   // Nome do briefing composto
  descricao   String?  // Descri√ß√£o opcional
  
  // Sele√ß√£o hier√°rquica
  disciplinas String[] // Disciplinas selecionadas
  areas       Json     // Mapeamento disciplina -> √°rea
  tipologias  Json     // Mapeamento disciplina -> tipologia
  
  // Status e progresso
  status      StatusBriefingComposto @default(CONFIGURACAO)
  progresso   Json     // Progresso detalhado
  
  // Metadatos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  // Relacionamentos
  projeto     Projeto @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  projetoId   String  @unique
  
  cliente     Cliente? @relation(fields: [clienteId], references: [id])
  clienteId   String?
  
  // Briefings individuais que comp√µem este briefing
  briefings   BriefingIndividual[]
  
  @@index([projetoId])
  @@index([clienteId])
  @@index([status])
  @@map("briefings_compostos")
}

// Briefings individuais (cada disciplina tem o seu)
model BriefingIndividual {
  id          String   @id @default(cuid())
  disciplina  String   // arquitetura, estrutural, instalacoes, etc
  briefingId  String   // ID do briefing template
  nome        String   // Nome do briefing individual
  
  // Dados do briefing
  respostas   Json     // Respostas do briefing
  status      StatusBriefingIndividual @default(PENDENTE)
  progresso   Int      @default(0) // Percentual de progresso
  ordem       Int      // Ordem de preenchimento
  
  // Valida√ß√£o
  aprovado    Boolean  @default(false)
  aprovadoEm  DateTime?
  observacoes String?
  
  // Metadados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  iniciadoEm  DateTime?
  concluidoEm DateTime?
  
  // Relacionamentos
  briefingComposto   BriefingComposto @relation(fields: [briefingCompostoId], references: [id], onDelete: Cascade)
  briefingCompostoId String
  
  @@index([briefingCompostoId])
  @@index([disciplina])
  @@index([status])
  @@index([ordem])
  @@map("briefings_individuais")
}

// Enums para os novos modelos
enum StatusBriefingComposto {
  CONFIGURACAO      // Selecionando disciplinas/√°reas/tipologias
  EM_PREENCHIMENTO  // Preenchendo briefings individuais
  CONCLUIDO         // Todos os briefings preenchidos
  APROVADO          // Briefing aprovado pelo cliente
  REJEITADO         // Briefing rejeitado
}

enum StatusBriefingIndividual {
  PENDENTE          // Aguardando preenchimento
  EM_ANDAMENTO      // Sendo preenchido
  CONCLUIDO         // Preenchimento conclu√≠do
  APROVADO          // Aprovado pelo respons√°vel
  REJEITADO         // Rejeitado e precisa ser refeito
}

// ===== SISTEMA DE CONVITES =====

model Convite {
  id          String   @id @default(cuid())
  email       String
  nome        String
  
  // Separa√ß√£o clara entre cargo e fun√ß√£o
  cargo       CargoProfissional     // Forma√ß√£o profissional
  funcao      FuncaoOrganizacional  // Papel na organiza√ß√£o
  role        UserRole              // Permiss√µes no sistema
  
  token       String   @unique
  status      StatusConvite @default(PENDENTE)
  expiresAt   DateTime
  
  // Mensagem personalizada
  mensagemPersonalizada String?
  
  // Relacionamentos
  escritorio   Escritorio @relation(fields: [escritorioId], references: [id], onDelete: Cascade)
  escritorioId String
  
  enviadoPor   User @relation(fields: [enviadoPorId], references: [id])
  enviadoPorId String
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  aceitoEm    DateTime?
  
  @@index([email])
  @@index([token])
  @@index([escritorioId])
  @@index([status])
  @@index([expiresAt])
  @@index([cargo])
  @@index([funcao])
  @@map("convites")
}

enum StatusConvite {
  PENDENTE
  ACEITO
  CANCELADO
  EXPIRADO
}
