/**
 * VERIFICAR OR√áAMENTO DO BRIEFING ESPEC√çFICO
 * 
 * Este script verifica qual or√ßamento existe para o briefing que voc√™ est√° testando
 */

const { Client } = require('pg');

async function verificarOrcamentoBriefingEspecifico() {
  const client = new Client({
    connectionString: "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres"
  });

  try {
    console.log('üîç VERIFICANDO OR√áAMENTO DO BRIEFING ESPEC√çFICO');
    console.log('='.repeat(60));

    await client.connect();

    // Buscar briefings com or√ßamentos
    console.log('\n1. Briefings com or√ßamentos existentes:');
    const briefingsComOrcamento = await client.query(`
      SELECT 
        b.id as briefing_id,
        b.nome_projeto,
        b.status as briefing_status,
        o.id as orcamento_id,
        o.codigo as orcamento_codigo,
        o.valor_total,
        o.created_at as orcamento_criado
      FROM briefings b
      INNER JOIN orcamentos o ON b.id = o.briefing_id
      ORDER BY o.created_at DESC
      LIMIT 10
    `);

    console.log(`üìä Encontrados ${briefingsComOrcamento.rows.length} briefings com or√ßamentos:`);
    briefingsComOrcamento.rows.forEach(row => {
      console.log(`   üìã Briefing: ${row.nome_projeto}`);
      console.log(`      ID: ${row.briefing_id}`);
      console.log(`      üí∞ Or√ßamento ID: ${row.orcamento_id} | C√≥digo: ${row.orcamento_codigo}`);
      console.log(`      üíµ Valor: R$ ${row.valor_total} | Criado: ${row.orcamento_criado}`);
      console.log(`      üîó URL correta: /orcamentos/${row.orcamento_id}`);
      console.log('');
    });

    // Verificar o briefing "Casa REAL" especificamente
    console.log('\n2. Verificando briefing "Casa REAL" especificamente:');
    const casaReal = await client.query(`
      SELECT 
        b.id as briefing_id,
        b.nome_projeto,
        o.id as orcamento_id,
        o.codigo as orcamento_codigo,
        o.valor_total
      FROM briefings b
      LEFT JOIN orcamentos o ON b.id = o.briefing_id
      WHERE b.nome_projeto ILIKE '%casa%real%'
      ORDER BY b.created_at DESC
    `);

    if (casaReal.rows.length > 0) {
      const briefing = casaReal.rows[0];
      console.log(`üìã Briefing encontrado: ${briefing.nome_projeto}`);
      console.log(`   ID do Briefing: ${briefing.briefing_id}`);
      
      if (briefing.orcamento_id) {
        console.log(`   ‚úÖ TEM OR√áAMENTO:`);
        console.log(`      ID do Or√ßamento: ${briefing.orcamento_id}`);
        console.log(`      C√≥digo: ${briefing.orcamento_codigo}`);
        console.log(`      Valor: R$ ${briefing.valor_total}`);
        console.log(`      üîó URL correta: /orcamentos/${briefing.orcamento_id}`);
        console.log('');
        console.log(`   üéØ COMPORTAMENTO ESPERADO:`);
        console.log(`      - Quando clicar "Gerar Or√ßamento"`);
        console.log(`      - API retorna: ORCAMENTO_ALREADY_EXISTS`);
        console.log(`      - Frontend redireciona para: /orcamentos/${briefing.orcamento_id}`);
        console.log(`      - N√ÉO mais para /orcamentos/1`);
      } else {
        console.log(`   ‚ùå N√ÉO TEM OR√áAMENTO - pode gerar novo`);
      }
    } else {
      console.log('‚ùå Briefing "Casa REAL" n√£o encontrado');
    }

    console.log('\n' + '='.repeat(60));
    console.log('üéâ CONCLUS√ÉO:');
    console.log('‚úÖ O c√≥digo foi corrigido e funcionar√° corretamente');
    console.log('‚úÖ Briefings com or√ßamento existente redirecionam para ID real');
    console.log('‚úÖ Novos or√ßamentos tamb√©m usam ID real');
    console.log('‚ùå N√ÉO haver√° mais redirecionamento para /orcamentos/1');

  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  } finally {
    await client.end();
  }
}

verificarOrcamentoBriefingEspecifico();