/**
 * üîç AN√ÅLISE CR√çTICA: INCONSIST√äNCIA CRONOGRAMA vs DISCIPLINAS
 */

const { Client } = require('pg');

async function analisarInconsistenciaCronograma() {
  const client = new Client({
    connectionString: "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres"
  });

  try {
    await client.connect();
    
    console.log('üîç AN√ÅLISE CR√çTICA: CRONOGRAMA vs DISCIPLINAS');
    console.log('='.repeat(60));
    
    const orcamentoId = 61;
    
    // Buscar dados completos do or√ßamento
    const result = await client.query(`
      SELECT 
        valor_total,
        disciplinas,
        cronograma,
        composicao_financeira,
        dados_extraidos
      FROM orcamentos 
      WHERE id = $1
    `, [orcamentoId]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå Or√ßamento n√£o encontrado');
      return;
    }
    
    const orcamento = result.rows[0];
    
    console.log('üí∞ VALOR TOTAL:', `R$ ${parseFloat(orcamento.valor_total).toLocaleString('pt-BR')}`);
    console.log('\nüìã DISCIPLINAS INCLU√çDAS:');
    orcamento.disciplinas.forEach((disc, i) => {
      console.log(`${i+1}. ${disc}`);
    });
    
    console.log('\nüìÖ CRONOGRAMA ATUAL:');
    const cronograma = orcamento.cronograma;
    if (cronograma && cronograma.fases) {
      let totalCronograma = 0;
      Object.entries(cronograma.fases).forEach(([key, fase]) => {
        console.log(`üìå ${fase.nome}: ${fase.prazo} semanas - R$ ${fase.valor.toLocaleString('pt-BR')}`);
        totalCronograma += fase.valor;
      });
      console.log(`\nüí∞ TOTAL DO CRONOGRAMA: R$ ${totalCronograma.toLocaleString('pt-BR')}`);
      console.log(`üìä METODOLOGIA: ${cronograma.metodologia}`);
    }
    
    console.log('\nüîç AN√ÅLISE CR√çTICA:');
    console.log('='.repeat(50));
    
    // 1. Verificar se disciplinas est√£o no cronograma
    const disciplinasIncluidas = orcamento.disciplinas;
    const fasesArquitetura = cronograma?.fases || {};
    
    console.log('‚ùå PROBLEMAS IDENTIFICADOS:');
    
    let problema1 = false;
    if (disciplinasIncluidas.includes('ESTRUTURAL')) {
      console.log('1. ‚ùå ESTRUTURAL inclu√≠do no valor mas N√ÉO aparece no cronograma');
      problema1 = true;
    }
    
    let problema2 = false;
    if (disciplinasIncluidas.includes('INSTALACOES_ELETRICAS')) {
      console.log('2. ‚ùå INSTALA√á√ïES EL√âTRICAS inclu√≠do no valor mas N√ÉO aparece no cronograma');
      problema2 = true;
    }
    
    let problema3 = false;
    if (disciplinasIncluidas.includes('INSTALACOES_HIDRAULICAS')) {
      console.log('3. ‚ùå INSTALA√á√ïES HIDR√ÅULICAS inclu√≠do no valor mas N√ÉO aparece no cronograma');
      problema3 = true;
    }
    
    // 2. Verificar composi√ß√£o financeira
    console.log('\nüí∞ COMPOSI√á√ÉO FINANCEIRA:');
    const composicao = orcamento.composicao_financeira;
    if (composicao) {
      console.log(`Custo T√©cnico: R$ ${composicao.custoTecnico?.toLocaleString('pt-BR') || 'N/A'}`);
      console.log(`Subtotal: R$ ${composicao.subtotal?.toLocaleString('pt-BR') || 'N/A'}`);
      console.log(`Impostos: R$ ${composicao.impostos?.toLocaleString('pt-BR') || 'N/A'}`);
      console.log(`Lucro: R$ ${composicao.lucro?.toLocaleString('pt-BR') || 'N/A'}`);
      console.log(`Valor Final: R$ ${composicao.valorFinal?.toLocaleString('pt-BR') || 'N/A'}`);
    }
    
    // 3. An√°lise do problema
    console.log('\nüéØ DIAGN√ìSTICO DO PROBLEMA:');
    console.log('='.repeat(50));
    
    if (problema1 || problema2 || problema3) {
      console.log('‚ùå INCONSIST√äNCIA CR√çTICA DETECTADA!');
      console.log('');
      console.log('üîç CAUSA RAIZ:');
      console.log('‚Ä¢ O cronograma mostra apenas fases de ARQUITETURA (NBR 13532)');
      console.log('‚Ä¢ Mas o valor inclui outras disciplinas (ESTRUTURAL, EL√âTRICA, HIDR√ÅULICA)');
      console.log('‚Ä¢ Cliente paga por servi√ßos que n√£o v√™ no cronograma');
      console.log('');
      console.log('üí° SOLU√á√ïES POSS√çVEIS:');
      console.log('1. ADICIONAR fases das outras disciplinas no cronograma');
      console.log('2. SEPARAR or√ßamentos por disciplina');
      console.log('3. CRIAR cronograma integrado multidisciplinar');
      console.log('4. EXPLICAR melhor o que est√° inclu√≠do no valor');
      
      console.log('\nüìã CRONOGRAMA CORRETO DEVERIA INCLUIR:');
      
      if (disciplinasIncluidas.includes('ESTRUTURAL')) {
        console.log('üèóÔ∏è PROJETO ESTRUTURAL:');
        console.log('   ‚Ä¢ An√°lise estrutural');
        console.log('   ‚Ä¢ Dimensionamento');
        console.log('   ‚Ä¢ Detalhamento estrutural');
        console.log('   ‚Ä¢ Memorial de c√°lculo');
      }
      
      if (disciplinasIncluidas.includes('INSTALACOES_ELETRICAS')) {
        console.log('‚ö° PROJETO EL√âTRICO:');
        console.log('   ‚Ä¢ Dimensionamento el√©trico');
        console.log('   ‚Ä¢ Quadros e circuitos');
        console.log('   ‚Ä¢ Detalhamento instala√ß√µes');
        console.log('   ‚Ä¢ Memorial descritivo el√©trico');
      }
      
      if (disciplinasIncluidas.includes('INSTALACOES_HIDRAULICAS')) {
        console.log('üö∞ PROJETO HIDR√ÅULICO:');
        console.log('   ‚Ä¢ √Ågua fria e quente');
        console.log('   ‚Ä¢ Esgoto e √°guas pluviais');
        console.log('   ‚Ä¢ Detalhamento hidr√°ulico');
        console.log('   ‚Ä¢ Memorial descritivo hidr√°ulico');
      }
      
    } else {
      console.log('‚úÖ Cronograma consistente com disciplinas');
    }
    
    console.log('\n‚ö†Ô∏è IMPACTO NO CLIENTE:');
    console.log('‚Ä¢ Cliente n√£o entende pelo que est√° pagando');
    console.log('‚Ä¢ Falta transpar√™ncia nos entreg√°veis');
    console.log('‚Ä¢ Pode gerar questionamentos sobre o valor');
    console.log('‚Ä¢ Prejudica confian√ßa na proposta');
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
  } finally {
    await client.end();
  }
}

analisarInconsistenciaCronograma();