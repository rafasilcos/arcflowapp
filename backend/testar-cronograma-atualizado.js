/**
 * üß™ TESTAR CRONOGRAMA ATUALIZADO
 * Testar se o sistema est√° gerando or√ßamentos com a nova estrutura detalhada
 */

const { Client } = require('pg');
const { connectDatabase } = require('./config/database');
const OrcamentoService = require('./services/orcamentoService');

async function testarCronogramaAtualizado() {
  const client = new Client({
    connectionString: "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres"
  });

  try {
    await client.connect();
    
    // Inicializar conex√£o do sistema
    await connectDatabase();
    
    console.log('üß™ TESTANDO CRONOGRAMA ATUALIZADO');
    console.log('='.repeat(60));
    
    // Buscar um briefing para teste
    const briefingResult = await client.query(`
      SELECT id, nome_projeto, escritorio_id 
      FROM briefings 
      WHERE status IN ('CONCLUIDO', 'APROVADO', 'EM_ANDAMENTO')
        AND deleted_at IS NULL
      ORDER BY updated_at DESC
      LIMIT 1
    `);
    
    if (briefingResult.rows.length === 0) {
      console.log('‚ùå Nenhum briefing dispon√≠vel para teste');
      return;
    }
    
    const briefing = briefingResult.rows[0];
    console.log('üìã Briefing selecionado:', {
      id: briefing.id,
      nome: briefing.nome_projeto,
      escritorio: briefing.escritorio_id
    });
    
    // Verificar se j√° existe or√ßamento
    const orcamentoExistente = await client.query(`
      SELECT id FROM orcamentos 
      WHERE briefing_id = $1 AND deleted_at IS NULL
    `, [briefing.id]);
    
    if (orcamentoExistente.rows.length > 0) {
      console.log('‚ö†Ô∏è J√° existe or√ßamento para este briefing, removendo para teste...');
      await client.query(`
        UPDATE orcamentos 
        SET deleted_at = NOW() 
        WHERE briefing_id = $1
      `, [briefing.id]);
    }
    
    // Gerar novo or√ßamento com estrutura atualizada
    console.log('üöÄ Gerando or√ßamento com cronograma atualizado...');
    
    const resultado = await OrcamentoService.gerarOrcamentoInteligente(
      briefing.id,
      briefing.escritorio_id,
      'admin' // userId para teste
    );
    
    if (resultado.success) {
      console.log('‚úÖ OR√áAMENTO GERADO COM SUCESSO!');
      console.log('-'.repeat(60));
      
      console.log('üìä DADOS DO OR√áAMENTO:');
      console.log(`üÜî ID: ${resultado.data.orcamentoId}`);
      console.log(`üî¢ C√≥digo: ${resultado.data.codigo}`);
      console.log(`üí∞ Valor Total: R$ ${resultado.data.valorTotal.toLocaleString('pt-BR')}`);
      console.log(`üìè Valor por m¬≤: R$ ${resultado.data.valorPorM2.toLocaleString('pt-BR')}`);
      console.log(`üè† √Årea: ${resultado.data.areaConstruida}m¬≤`);
      console.log(`‚è±Ô∏è Prazo: ${resultado.data.prazoEntrega} semanas`);
      
      // Verificar cronograma detalhado
      const orcamentoCompleto = await client.query(`
        SELECT cronograma FROM orcamentos WHERE id = $1
      `, [resultado.data.orcamentoId]);
      
      if (orcamentoCompleto.rows.length > 0) {
        const cronograma = orcamentoCompleto.rows[0].cronograma;
        
        console.log('\nüìÖ CRONOGRAMA DETALHADO:');
        console.log('-'.repeat(60));
        
        let totalEntregaveis = 0;
        Object.entries(cronograma.fases).forEach(([key, fase]) => {
          console.log(`\n${fase.ordem}. ${fase.nome}`);
          console.log(`   üìã Etapa NBR: ${fase.etapa}`);
          console.log(`   üë• Respons√°vel: ${fase.responsavel}`);
          console.log(`   ‚è±Ô∏è Prazo: ${fase.prazo} semanas`);
          console.log(`   üí∞ Valor: R$ ${fase.valor.toLocaleString('pt-BR')}`);
          console.log(`   üì¶ Entreg√°veis: ${fase.entregaveis.length} itens`);
          
          // Mostrar alguns entreg√°veis como exemplo
          if (fase.entregaveis.length > 0) {
            console.log(`   üìù Exemplos de entreg√°veis:`);
            fase.entregaveis.slice(0, 3).forEach((entregavel, index) => {
              console.log(`      ${index + 1}. ${entregavel}`);
            });
            if (fase.entregaveis.length > 3) {
              console.log(`      ... e mais ${fase.entregaveis.length - 3} itens`);
            }
          }
          
          totalEntregaveis += fase.entregaveis.length;
        });
        
        console.log('\nüìä ESTAT√çSTICAS DO CRONOGRAMA:');
        console.log('-'.repeat(60));
        console.log(`üìÖ Total de fases: ${Object.keys(cronograma.fases).length}`);
        console.log(`üì¶ Total de entreg√°veis: ${totalEntregaveis}`);
        console.log(`‚è±Ô∏è Prazo total: ${cronograma.prazoTotal} semanas`);
        console.log(`üí∞ Valor t√©cnico total: R$ ${cronograma.valorTecnicoTotal.toLocaleString('pt-BR')}`);
        console.log(`üîß Metodologia: ${cronograma.metodologia}`);
        
        // Verificar se todas as fases t√™m a estrutura detalhada
        console.log('\n‚úÖ VALIDA√á√ÉO DA ESTRUTURA:');
        console.log('-'.repeat(60));
        
        let estruturaValida = true;
        Object.entries(cronograma.fases).forEach(([key, fase]) => {
          const camposObrigatorios = ['ordem', 'etapa', 'nome', 'prazo', 'valor', 'responsavel', 'entregaveis'];
          const camposFaltando = camposObrigatorios.filter(campo => !fase[campo]);
          
          if (camposFaltando.length > 0) {
            console.log(`‚ùå ${fase.nome}: Campos faltando: ${camposFaltando.join(', ')}`);
            estruturaValida = false;
          } else {
            console.log(`‚úÖ ${fase.nome}: Estrutura completa`);
          }
        });
        
        if (estruturaValida) {
          console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
          console.log('‚úÖ Cronograma com estrutura detalhada implementada');
          console.log('‚úÖ Todos os entreg√°veis t√©cnicos presentes');
          console.log('‚úÖ Respons√°veis definidos para cada fase');
          console.log('‚úÖ Observa√ß√µes t√©cnicas inclu√≠das');
          console.log('‚úÖ Conformidade com NBR 13532');
          
          console.log('\nüöÄ PR√ìXIMOS PASSOS:');
          console.log('1. Acesse o frontend para visualizar o or√ßamento');
          console.log(`2. Procure pelo c√≥digo: ${resultado.data.codigo}`);
          console.log('3. Verifique se todos os detalhes est√£o sendo exibidos corretamente');
          console.log('4. Teste a funcionalidade de exporta√ß√£o/impress√£o');
          
        } else {
          console.log('\n‚ö†Ô∏è TESTE COM PROBLEMAS DE ESTRUTURA');
        }
        
      } else {
        console.log('‚ùå Erro ao buscar cronograma detalhado');
      }
      
    } else {
      console.log('‚ùå ERRO NA GERA√á√ÉO DO OR√áAMENTO:', resultado.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await client.end();
  }
}

testarCronogramaAtualizado();