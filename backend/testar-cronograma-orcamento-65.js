/**
 * üîç TESTE ESPEC√çFICO: CRONOGRAMA DO OR√áAMENTO 65
 * 
 * Verificar exatamente como o cronograma est√° sendo gerado
 */

const { gerarCronogramaCompleto, validarCronograma } = require('./utils/cronogramaCompleto');

async function testarCronogramaOrcamento65() {
  console.log('üîç TESTE ESPEC√çFICO DO CRONOGRAMA - OR√áAMENTO 65\n');
  
  // 1. Validar estrutura base do cronograma
  console.log('1. üìã VALIDANDO ESTRUTURA BASE...');
  const validacao = validarCronograma();
  
  console.log(`   - Total de entreg√°veis: ${validacao.total}`);
  console.log(`   - Esperado: ${validacao.esperado}`);
  console.log(`   - Status: ${validacao.correto ? '‚úÖ CORRETO' : '‚ùå INCORRETO'}`);
  
  if (!validacao.correto) {
    console.log('\n‚ùå PROBLEMA NA ESTRUTURA BASE!');
    console.log('   Detalhamento por fase:');
    Object.keys(validacao.detalhamento).forEach(fase => {
      console.log(`     ${fase}: ${validacao.detalhamento[fase]} entreg√°veis`);
    });
    return;
  }
  
  // 2. Testar gera√ß√£o com dados similares ao or√ßamento 65
  console.log('\n2. üîß TESTANDO GERA√á√ÉO COM DADOS DO OR√áAMENTO 65...');
  
  const valorTotal = 18000;
  const disciplinas = ['arquitetura', 'estrutural', 'hidraulica', 'eletrica'];
  
  console.log(`   - Valor total: R$ ${valorTotal.toLocaleString('pt-BR')}`);
  console.log(`   - Disciplinas: ${disciplinas.join(', ')}`);
  
  const cronograma = gerarCronogramaCompleto(valorTotal, disciplinas);
  
  console.log('\nüìä RESULTADO DA GERA√á√ÉO:');
  console.log(`   - Prazo total: ${cronograma.prazoTotal} semanas`);
  console.log(`   - Metodologia: ${cronograma.metodologia}`);
  console.log(`   - Total entreg√°veis: ${cronograma.totalEntregaveis}`);
  console.log(`   - N√∫mero de fases: ${Object.keys(cronograma.fases).length}`);
  
  // 3. Analisar cada fase gerada
  console.log('\n3. üìã AN√ÅLISE DETALHADA DAS FASES GERADAS:');
  
  let totalContado = 0;
  Object.keys(cronograma.fases).forEach((faseKey, index) => {
    const fase = cronograma.fases[faseKey];
    const numEntregaveis = fase.entregaveis ? fase.entregaveis.length : 0;
    totalContado += numEntregaveis;
    
    console.log(`\n   ${index + 1}. ${fase.codigo} - ${fase.nome}:`);
    console.log(`      - Etapa: ${fase.etapa}`);
    console.log(`      - Ordem: ${fase.ordem}`);
    console.log(`      - Prazo: ${fase.prazo} semanas`);
    console.log(`      - Valor: R$ ${fase.valor.toLocaleString('pt-BR')}`);
    console.log(`      - Entreg√°veis: ${numEntregaveis} itens`);
    console.log(`      - Disciplinas: ${fase.disciplinas.join(', ')}`);
    console.log(`      - Ativa: ${fase.ativa ? 'Sim' : 'N√£o'}`);
    
    // Mostrar primeiros entreg√°veis
    if (fase.entregaveis && fase.entregaveis.length > 0) {
      console.log(`      üìù Primeiros entreg√°veis:`);
      fase.entregaveis.slice(0, 2).forEach((entregavel, i) => {
        console.log(`         ${i + 1}. ${entregavel}`);
      });
      if (fase.entregaveis.length > 2) {
        console.log(`         ... e mais ${fase.entregaveis.length - 2} entreg√°veis`);
      }
    }
  });
  
  console.log(`\nüìä CONTAGEM FINAL:`);
  console.log(`   - Total contado: ${totalContado}`);
  console.log(`   - Total informado: ${cronograma.totalEntregaveis}`);
  console.log(`   - Status: ${totalContado === 72 && cronograma.totalEntregaveis === 72 ? '‚úÖ CORRETO' : '‚ùå INCORRETO'}`);
  
  // 4. Testar com disciplinas diferentes
  console.log('\n4. üîß TESTANDO COM DISCIPLINAS DIFERENTES...');
  
  const disciplinasReduzidas = ['arquitetura'];
  const cronogramaReduzido = gerarCronogramaCompleto(valorTotal, disciplinasReduzidas);
  
  console.log(`   - Disciplinas: ${disciplinasReduzidas.join(', ')}`);
  console.log(`   - Total entreg√°veis: ${cronogramaReduzido.totalEntregaveis}`);
  
  let totalReduzido = 0;
  Object.keys(cronogramaReduzido.fases).forEach(faseKey => {
    const fase = cronogramaReduzido.fases[faseKey];
    totalReduzido += fase.entregaveis.length;
    console.log(`     ${fase.codigo}: ${fase.entregaveis.length} entreg√°veis, disciplinas: ${fase.disciplinas.join(', ')}`);
  });
  
  console.log(`   - Total contado: ${totalReduzido}`);
  
  // 5. Diagn√≥stico final
  console.log('\nüéØ DIAGN√ìSTICO FINAL:');
  
  if (totalContado === 72 && cronograma.totalEntregaveis === 72) {
    console.log('‚úÖ A fun√ß√£o gerarCronogramaCompleto est√° funcionando corretamente');
    console.log('‚úÖ O problema N√ÉO est√° na gera√ß√£o do cronograma');
    console.log('üîç O problema pode estar em:');
    console.log('   - Como os dados s√£o salvos no banco');
    console.log('   - Como os dados s√£o recuperados do banco');
    console.log('   - Como o frontend exibe os dados');
    console.log('   - Alguma transforma√ß√£o dos dados ap√≥s a gera√ß√£o');
  } else {
    console.log('‚ùå A fun√ß√£o gerarCronogramaCompleto tem problemas');
    console.log('üîß Necess√°rio corrigir a l√≥gica de gera√ß√£o');
  }
}

testarCronogramaOrcamento65();