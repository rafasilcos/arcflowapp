/**
 * üß™ TESTE COMPLETO DA EXTRA√á√ÉO CORRIGIDA DE DADOS DO BRIEFING
 * 
 * Verifica se todos os problemas identificados foram resolvidos:
 * 1. √Årea extra√≠da corretamente (250m¬≤ vs 150m¬≤)
 * 2. √Årea de atua√ß√£o extra√≠da (RESIDENCIAL)
 * 3. Tipologia mantida correta
 * 4. Disciplinas e servi√ßos corretos
 */

const { connectDatabase, getClient } = require('./config/database');
const BriefingAnalyzer = require('./utils/briefingAnalyzer');
const OrcamentoCalculator = require('./utils/orcamentoCalculator');

async function testarExtracaoCorrigida() {
  await connectDatabase();
  const client = getClient();
  
  try {
    console.log('üß™ TESTE COMPLETO DA EXTRA√á√ÉO CORRIGIDA\n');
    
    // Usar o briefing que sabemos que tem os dados corretos
    const briefingId = '6a9e3407-8da0-4bbc-8221-768b6e6d255e';
    
    // Buscar briefing completo
    const briefingResult = await client.query(`
      SELECT 
        b.*,
        c.nome as cliente_nome,
        u.nome as responsavel_nome
      FROM briefings b
      LEFT JOIN clientes c ON b.cliente_id::text = c.id
      LEFT JOIN users u ON b.responsavel_id::text = u.id
      WHERE b.id = $1::uuid AND b.deleted_at IS NULL
    `, [briefingId]);
    
    if (briefingResult.rows.length === 0) {
      console.log('‚ùå Briefing n√£o encontrado');
      return;
    }
    
    const briefing = briefingResult.rows[0];
    
    console.log('üìã BRIEFING DE TESTE:');
    console.log(`   Nome: ${briefing.nome_projeto}`);
    console.log(`   Tipologia original: ${briefing.tipologia}`);
    console.log(`   √Årea original: ${briefing.area}`);
    console.log(`   Cliente: ${briefing.cliente_nome}`);
    console.log('');
    
    // Testar an√°lise inteligente
    console.log('üß† TESTANDO AN√ÅLISE INTELIGENTE CORRIGIDA...');
    const analyzer = new BriefingAnalyzer();
    const dadosEstruturados = await analyzer.extrairDadosEstruturados(briefing);
    
    console.log('‚úÖ DADOS EXTRA√çDOS:');
    console.log(`   üè¢ √Årea de atua√ß√£o: ${dadosEstruturados.areaAtuacao}`);
    console.log(`   üè† Tipologia: ${dadosEstruturados.tipologia}`);
    console.log(`   üìê √Årea constru√≠da: ${dadosEstruturados.areaConstruida}m¬≤`);
    console.log(`   üåç √Årea terreno: ${dadosEstruturados.areaTerreno}m¬≤`);
    console.log(`   ‚≠ê Padr√£o: ${dadosEstruturados.padrao}`);
    console.log(`   üéØ Complexidade: ${dadosEstruturados.complexidade}`);
    console.log(`   üìç Localiza√ß√£o: ${dadosEstruturados.localizacao}`);
    console.log(`   üîß Disciplinas: ${dadosEstruturados.disciplinasNecessarias.join(', ')}`);
    console.log(`   ‚ú® Caracter√≠sticas: ${dadosEstruturados.caracteristicasEspeciais.join(', ')}`);
    console.log(`   ‚è±Ô∏è Prazo estimado: ${dadosEstruturados.prazoEstimado} dias`);
    console.log(`   üéØ Confian√ßa: ${dadosEstruturados.confianca}%`);
    console.log('');
    
    // Testar c√°lculo de or√ßamento
    console.log('üí∞ TESTANDO C√ÅLCULO DE OR√áAMENTO CORRIGIDO...');
    const calculator = new OrcamentoCalculator();
    const orcamentoCalculado = await calculator.calcularOrcamentoAvancado(dadosEstruturados);
    
    console.log('‚úÖ OR√áAMENTO CALCULADO:');
    console.log(`   üí∞ Valor total: R$ ${orcamentoCalculado.valorTotal.toLocaleString('pt-BR')}`);
    console.log(`   üìä Valor por m¬≤: R$ ${orcamentoCalculado.valorPorM2.toLocaleString('pt-BR')}`);
    console.log(`   üìê √Årea: ${orcamentoCalculado.areaConstruida}m¬≤`);
    console.log(`   üè¢ √Årea de atua√ß√£o: ${orcamentoCalculado.areaAtuacao}`);
    console.log(`   üè† Tipologia: ${orcamentoCalculado.tipologia}`);
    console.log(`   ‚≠ê Padr√£o: ${orcamentoCalculado.padrao}`);
    console.log(`   üéØ Complexidade: ${orcamentoCalculado.complexidade}`);
    console.log(`   üìç Localiza√ß√£o: ${orcamentoCalculado.localizacao}`);
    console.log(`   ‚è±Ô∏è Prazo: ${orcamentoCalculado.prazoEntrega} dias`);
    console.log('');
    
    // Validar corre√ß√µes espec√≠ficas
    console.log('üîç VALIDA√á√ÉO DAS CORRE√á√ïES ESPEC√çFICAS:');
    
    const validacoes = [
      {
        nome: '1. √Årea extra√≠da corretamente',
        esperado: 250,
        atual: dadosEstruturados.areaConstruida,
        valido: dadosEstruturados.areaConstruida === 250,
        problema: '√Årea estava sendo extra√≠da como 150m¬≤ em vez de 250m¬≤'
      },
      {
        nome: '2. √Årea de atua√ß√£o extra√≠da',
        esperado: 'RESIDENCIAL',
        atual: dadosEstruturados.areaAtuacao,
        valido: dadosEstruturados.areaAtuacao === 'RESIDENCIAL',
        problema: '√Årea de atua√ß√£o n√£o estava sendo extra√≠da'
      },
      {
        nome: '3. Tipologia mantida correta',
        esperado: 'UNIFAMILIAR',
        atual: dadosEstruturados.tipologia,
        valido: dadosEstruturados.tipologia === 'UNIFAMILIAR',
        problema: 'Tipologia j√° estava funcionando, deve continuar'
      },
      {
        nome: '4. Disciplinas identificadas',
        esperado: 'M√∫ltiplas disciplinas',
        atual: `${dadosEstruturados.disciplinasNecessarias.length} disciplinas`,
        valido: dadosEstruturados.disciplinasNecessarias.length >= 4,
        problema: 'Disciplinas devem ser identificadas corretamente'
      },
      {
        nome: '5. Valor por m¬≤ coerente com √°rea de atua√ß√£o',
        esperado: 'Entre R$ 800-3600/m¬≤ (RESIDENCIAL)',
        atual: `R$ ${orcamentoCalculado.valorPorM2.toLocaleString('pt-BR')}/m¬≤`,
        valido: orcamentoCalculado.valorPorM2 >= 800 && orcamentoCalculado.valorPorM2 <= 3600,
        problema: 'Valor deve usar tabela RESIDENCIAL, n√£o COMERCIAL'
      },
      {
        nome: '6. Valor total proporcional √† √°rea',
        esperado: 'Proporcional a 250m¬≤',
        atual: `R$ ${orcamentoCalculado.valorTotal.toLocaleString('pt-BR')}`,
        valido: orcamentoCalculado.valorTotal > 100000, // Valor realista para 250m¬≤
        problema: 'Valor total deve refletir √°rea real de 250m¬≤'
      }
    ];
    
    let validacoesPassaram = 0;
    
    validacoes.forEach((validacao, index) => {
      const status = validacao.valido ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${validacao.nome}:`);
      console.log(`      Esperado: ${validacao.esperado}`);
      console.log(`      Atual: ${validacao.atual}`);
      if (!validacao.valido) {
        console.log(`      ‚ö†Ô∏è Problema: ${validacao.problema}`);
      }
      console.log('');
      
      if (validacao.valido) validacoesPassaram++;
    });
    
    // Compara√ß√£o antes vs depois
    console.log('üìä COMPARA√á√ÉO ANTES vs DEPOIS:');
    
    const logicaAntiga = {
      areaAtuacao: 'N√ÉO EXTRA√çDA',
      area: 150,
      valorPorM2: 1000,
      valorTotal: 18000,
      tipologia: 'COMERCIAL (incorreto)'
    };
    
    const logicaNova = {
      areaAtuacao: dadosEstruturados.areaAtuacao,
      area: dadosEstruturados.areaConstruida,
      valorPorM2: orcamentoCalculado.valorPorM2,
      valorTotal: orcamentoCalculado.valorTotal,
      tipologia: dadosEstruturados.tipologia
    };
    
    console.log('   ‚ùå ANTES (PROBLEMAS):');
    console.log(`      √Årea de atua√ß√£o: ${logicaAntiga.areaAtuacao}`);
    console.log(`      √Årea: ${logicaAntiga.area}m¬≤`);
    console.log(`      Valor/m¬≤: R$ ${logicaAntiga.valorPorM2.toLocaleString('pt-BR')}`);
    console.log(`      Valor total: R$ ${logicaAntiga.valorTotal.toLocaleString('pt-BR')}`);
    console.log(`      Tipologia: ${logicaAntiga.tipologia}`);
    console.log('');
    
    console.log('   ‚úÖ DEPOIS (CORRIGIDO):');
    console.log(`      √Årea de atua√ß√£o: ${logicaNova.areaAtuacao}`);
    console.log(`      √Årea: ${logicaNova.area}m¬≤`);
    console.log(`      Valor/m¬≤: R$ ${logicaNova.valorPorM2.toLocaleString('pt-BR')}`);
    console.log(`      Valor total: R$ ${logicaNova.valorTotal.toLocaleString('pt-BR')}`);
    console.log(`      Tipologia: ${logicaNova.tipologia}`);
    console.log('');
    
    // Calcular melhorias
    const melhorias = {
      areaCorrigida: ((logicaNova.area - logicaAntiga.area) / logicaAntiga.area) * 100,
      valorCorrigido: ((logicaNova.valorTotal - logicaAntiga.valorTotal) / logicaAntiga.valorTotal) * 100,
      areaAtuacaoAdicionada: logicaNova.areaAtuacao !== 'N√ÉO EXTRA√çDA'
    };
    
    console.log('üìà MELHORIAS IMPLEMENTADAS:');
    console.log(`   üìê √Årea corrigida: +${melhorias.areaCorrigida.toFixed(1)}% (${logicaNova.area - logicaAntiga.area}m¬≤ a mais)`);
    console.log(`   üí∞ Valor corrigido: +${melhorias.valorCorrigido.toFixed(1)}% (R$ ${(logicaNova.valorTotal - logicaAntiga.valorTotal).toLocaleString('pt-BR')} a mais)`);
    console.log(`   üè¢ √Årea de atua√ß√£o: ${melhorias.areaAtuacaoAdicionada ? 'ADICIONADA' : 'AINDA FALTANDO'}`);
    console.log(`   üéØ Confian√ßa: ${dadosEstruturados.confianca}% (antes: 0%)`);
    console.log('');
    
    // Resultado final
    const totalValidacoes = validacoes.length;
    const percentualSucesso = (validacoesPassaram / totalValidacoes) * 100;
    
    console.log('üéØ RESULTADO FINAL:');
    console.log(`   Valida√ß√µes passaram: ${validacoesPassaram}/${totalValidacoes}`);
    console.log(`   Percentual de sucesso: ${percentualSucesso.toFixed(1)}%`);
    console.log('');
    
    if (validacoesPassaram === totalValidacoes) {
      console.log('üéâ SUCESSO COMPLETO!');
      console.log('‚úÖ Todos os problemas identificados foram corrigidos');
      console.log('‚úÖ A l√≥gica de extra√ß√£o est√° funcionando perfeitamente');
      console.log('‚úÖ Os or√ßamentos agora s√£o gerados com dados corretos');
    } else if (validacoesPassaram >= totalValidacoes * 0.8) {
      console.log('‚úÖ SUCESSO PARCIAL!');
      console.log('‚úÖ A maioria dos problemas foi corrigida');
      console.log('‚ö†Ô∏è Algumas valida√ß√µes ainda precisam de ajustes');
    } else {
      console.log('‚ö†Ô∏è AINDA H√Å PROBLEMAS!');
      console.log('‚ùå V√°rias valida√ß√µes falharam');
      console.log('üîß √â necess√°rio revisar a l√≥gica de extra√ß√£o');
    }
    
    console.log('');
    console.log('üìã PR√ìXIMOS PASSOS:');
    if (validacoesPassaram === totalValidacoes) {
      console.log('‚úÖ Sistema pronto para produ√ß√£o');
      console.log('‚úÖ Pode gerar or√ßamentos com dados corretos');
      console.log('‚úÖ Testar com outros briefings para confirmar robustez');
    } else {
      console.log('üîß Corrigir valida√ß√µes que falharam');
      console.log('üß™ Executar testes adicionais');
      console.log('üìä Verificar outros briefings de teste');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testarExtracaoCorrigida();