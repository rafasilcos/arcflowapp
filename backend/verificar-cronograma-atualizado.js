/**
 * üîç VERIFICAR CRONOGRAMA ATUALIZADO
 * Verificar se o cronograma foi atualizado com os detalhamentos t√©cnicos
 */

const { Client } = require('pg');

async function verificarCronogramaAtualizado() {
  const client = new Client({
    connectionString: "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres"
  });

  try {
    await client.connect();
    
    console.log('üîç VERIFICANDO CRONOGRAMA ATUALIZADO');
    console.log('='.repeat(60));
    
    const orcamentoId = 61;
    
    // Buscar cronograma atual
    const result = await client.query(`
      SELECT cronograma FROM orcamentos WHERE id = $1
    `, [orcamentoId]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå Or√ßamento n√£o encontrado');
      return;
    }
    
    const cronograma = result.rows[0].cronograma;
    
    console.log('üìã CRONOGRAMA DETALHADO:');
    console.log('-'.repeat(60));
    
    // Verificar cada fase
    Object.entries(cronograma.fases).forEach(([key, fase]) => {
      console.log(`\n${fase.ordem}. ${fase.nome}`);
      console.log(`   üìã Etapa NBR: ${fase.etapa}`);
      console.log(`   üë• Respons√°vel: ${fase.responsavel}`);
      console.log(`   ‚è±Ô∏è Prazo: ${fase.prazo} semanas`);
      console.log(`   üí∞ Valor: R$ ${fase.valor.toLocaleString('pt-BR')}`);
      console.log(`   üì¶ Entreg√°veis (${fase.entregaveis.length}):`);
      
      fase.entregaveis.forEach((entregavel, index) => {
        console.log(`      ${index + 1}. ${entregavel}`);
      });
      
      if (fase.observacoes) {
        console.log(`   üìù Observa√ß√µes: ${fase.observacoes}`);
      }
      
      // Verificar detalhamento por disciplina (se existir)
      if (fase.detalhamentoPorDisciplina) {
        console.log(`   üîß Detalhamento por Disciplina:`);
        Object.entries(fase.detalhamentoPorDisciplina).forEach(([disciplina, detalhes]) => {
          console.log(`      üìê ${disciplina}:`);
          detalhes.entregaveis.forEach((item, idx) => {
            console.log(`         ${idx + 1}. ${item}`);
          });
        });
      }
    });
    
    console.log('\nüìä ESTAT√çSTICAS DO CRONOGRAMA:');
    console.log('-'.repeat(60));
    
    const totalFases = Object.keys(cronograma.fases).length;
    const totalEntregaveis = Object.values(cronograma.fases)
      .reduce((total, fase) => total + fase.entregaveis.length, 0);
    const totalPrazo = Object.values(cronograma.fases)
      .reduce((total, fase) => total + fase.prazo, 0);
    const totalValor = Object.values(cronograma.fases)
      .reduce((total, fase) => total + fase.valor, 0);
    
    console.log(`üìÖ Total de fases: ${totalFases}`);
    console.log(`üì¶ Total de entreg√°veis: ${totalEntregaveis}`);
    console.log(`‚è±Ô∏è Prazo total: ${totalPrazo} semanas`);
    console.log(`üí∞ Valor total t√©cnico: R$ ${totalValor.toLocaleString('pt-BR')}`);
    
    // Verificar se todas as fases t√™m os campos obrigat√≥rios
    console.log('\n‚úÖ VALIDA√á√ÉO DOS CAMPOS:');
    console.log('-'.repeat(60));
    
    let validacao = true;
    Object.entries(cronograma.fases).forEach(([key, fase]) => {
      const camposObrigatorios = ['ordem', 'etapa', 'nome', 'prazo', 'valor', 'responsavel', 'entregaveis'];
      const camposFaltando = camposObrigatorios.filter(campo => !fase[campo]);
      
      if (camposFaltando.length > 0) {
        console.log(`‚ùå ${fase.nome}: Campos faltando: ${camposFaltando.join(', ')}`);
        validacao = false;
      } else {
        console.log(`‚úÖ ${fase.nome}: Todos os campos obrigat√≥rios presentes`);
      }
    });
    
    if (validacao) {
      console.log('\nüéâ CRONOGRAMA VALIDADO COM SUCESSO!');
      console.log('‚úÖ Todas as fases t√™m detalhamento t√©cnico completo');
      console.log('‚úÖ Entreg√°veis espec√≠ficos conforme NBR 13532');
      console.log('‚úÖ Respons√°veis definidos');
      console.log('‚úÖ Estrutura t√©cnica profissional');
    } else {
      console.log('\n‚ö†Ô∏è CRONOGRAMA COM PROBLEMAS DE VALIDA√á√ÉO');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  } finally {
    await client.end();
  }
}

verificarCronogramaAtualizado();