/**
 * üß™ TESTE DA NOVA L√ìGICA DE EXTRA√á√ÉO DE DADOS DO BRIEFING
 */

const { connectDatabase, getClient } = require('./config/database');
const BriefingAnalyzer = require('./utils/briefingAnalyzer');
const OrcamentoCalculator = require('./utils/orcamentoCalculator');

async function testarNovaLogica() {
  await connectDatabase();
  const client = getClient();
  
  try {
    console.log('üß™ TESTANDO NOVA L√ìGICA DE EXTRA√á√ÉO DE DADOS\n');
    
    // 1. Buscar briefing de teste
    const briefingResult = await client.query(`
      SELECT 
        b.*,
        c.nome as cliente_nome,
        u.nome as responsavel_nome
      FROM briefings b
      LEFT JOIN clientes c ON b.cliente_id::text = c.id
      LEFT JOIN users u ON b.responsavel_id::text = u.id
      WHERE b.id = '123e4567-e89b-12d3-a456-426614174003'
        AND b.deleted_at IS NULL
    `);
    
    if (briefingResult.rows.length === 0) {
      console.log('‚ùå Briefing de teste n√£o encontrado');
      return;
    }
    
    const briefing = briefingResult.rows[0];
    console.log('üìã BRIEFING DE TESTE CARREGADO:');
    console.log(`   Nome: ${briefing.nome_projeto}`);
    console.log(`   Tipologia original: ${briefing.tipologia}`);
    console.log(`   √Årea original: ${briefing.area}`);
    console.log(`   Cliente: ${briefing.cliente_nome}`);
    console.log('');
    
    // 2. Testar an√°lise inteligente
    console.log('üß† TESTANDO AN√ÅLISE INTELIGENTE...');
    const analyzer = new BriefingAnalyzer();
    const dadosEstruturados = await analyzer.extrairDadosEstruturados(briefing);
    
    console.log('‚úÖ DADOS EXTRA√çDOS PELA IA:');
    console.log(`   üìä Tipologia: ${dadosEstruturados.tipologia} (original: ${briefing.tipologia})`);
    console.log(`   üìê √Årea constru√≠da: ${dadosEstruturados.areaConstruida}m¬≤ (original: ${briefing.area})`);
    console.log(`   üåç √Årea terreno: ${dadosEstruturados.areaTerreno}m¬≤`);
    console.log(`   ‚≠ê Padr√£o: ${dadosEstruturados.padrao}`);
    console.log(`   üéØ Complexidade: ${dadosEstruturados.complexidade}`);
    console.log(`   üìç Localiza√ß√£o: ${dadosEstruturados.localizacao}`);
    console.log(`   üîß Disciplinas: ${dadosEstruturados.disciplinasNecessarias.join(', ')}`);
    console.log(`   ‚ú® Caracter√≠sticas: ${dadosEstruturados.caracteristicasEspeciais.join(', ')}`);
    console.log(`   ‚è±Ô∏è Prazo estimado: ${dadosEstruturados.prazoEstimado} dias`);
    console.log(`   üéØ Confian√ßa: ${dadosEstruturados.confianca}%`);
    console.log('');
    
    // 3. Testar c√°lculo de or√ßamento
    console.log('üí∞ TESTANDO C√ÅLCULO DE OR√áAMENTO...');
    const calculator = new OrcamentoCalculator();
    const orcamentoCalculado = await calculator.calcularOrcamentoAvancado(dadosEstruturados);
    
    console.log('‚úÖ OR√áAMENTO CALCULADO:');
    console.log(`   üí∞ Valor total: R$ ${orcamentoCalculado.valorTotal.toLocaleString('pt-BR')}`);
    console.log(`   üìä Valor por m¬≤: R$ ${orcamentoCalculado.valorPorM2.toLocaleString('pt-BR')}`);
    console.log(`   üìê √Årea: ${orcamentoCalculado.areaConstruida}m¬≤`);
    console.log(`   üè† Tipologia: ${orcamentoCalculado.tipologia}`);
    console.log(`   ‚≠ê Padr√£o: ${orcamentoCalculado.padrao}`);
    console.log(`   üéØ Complexidade: ${orcamentoCalculado.complexidade}`);
    console.log(`   üìç Localiza√ß√£o: ${orcamentoCalculado.localizacao}`);
    console.log(`   ‚è±Ô∏è Prazo: ${orcamentoCalculado.prazoEntrega} dias`);
    console.log('');
    
    // 4. Mostrar disciplinas detalhadas
    console.log('üîß DISCIPLINAS DETALHADAS:');
    orcamentoCalculado.disciplinas.forEach((disc, index) => {
      console.log(`   ${index + 1}. ${disc.nome}`);
      console.log(`      - Horas: ${disc.horasEstimadas}h`);
      console.log(`      - Valor/hora: R$ ${disc.valorHora}`);
      console.log(`      - Total: R$ ${disc.valorTotal.toLocaleString('pt-BR')}`);
      console.log(`      - Percentual: ${disc.percentualTotal}%`);
    });
    console.log('');
    
    // 5. Mostrar composi√ß√£o financeira
    console.log('üíº COMPOSI√á√ÉO FINANCEIRA:');
    const comp = orcamentoCalculado.composicaoFinanceira;
    console.log(`   üí∞ Custos de horas: R$ ${comp.custosHoras.toLocaleString('pt-BR')}`);
    console.log(`   üìä Custos indiretos: R$ ${comp.custosIndiretos.toLocaleString('pt-BR')}`);
    console.log(`   üèõÔ∏è Impostos: R$ ${comp.impostos.toLocaleString('pt-BR')}`);
    console.log(`   üìà Margem de lucro: R$ ${comp.margemLucro.toLocaleString('pt-BR')}`);
    console.log(`   üéØ Total: R$ ${comp.total.toLocaleString('pt-BR')}`);
    console.log('');
    
    // 6. Mostrar cronograma
    console.log('üìÖ CRONOGRAMA:');
    if (orcamentoCalculado.cronograma && orcamentoCalculado.cronograma.fases) {
      Object.entries(orcamentoCalculado.cronograma.fases).forEach(([key, fase]) => {
        console.log(`   üìã ${fase.nome}`);
        console.log(`      - Prazo: ${fase.prazo} dias`);
        console.log(`      - Valor: R$ ${fase.valor?.toLocaleString('pt-BR') || 'N/A'}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è Cronograma n√£o dispon√≠vel');
    }
    console.log('');
    
    // 7. Compara√ß√£o com l√≥gica antiga
    console.log('üîÑ COMPARA√á√ÉO COM L√ìGICA ANTIGA:');
    
    // Simular l√≥gica antiga (simplificada)
    const logicaAntiga = {
      tipologia: 'comercial', // Era detectado incorretamente
      area: 18, // Era calculado incorretamente
      valorPorM2: 1000,
      valorTotal: 18000
    };
    
    console.log('   ‚ùå L√ìGICA ANTIGA (INCORRETA):');
    console.log(`      - Tipologia: ${logicaAntiga.tipologia}`);
    console.log(`      - √Årea: ${logicaAntiga.area}m¬≤`);
    console.log(`      - Valor/m¬≤: R$ ${logicaAntiga.valorPorM2}`);
    console.log(`      - Valor total: R$ ${logicaAntiga.valorTotal.toLocaleString('pt-BR')}`);
    console.log('');
    
    console.log('   ‚úÖ L√ìGICA NOVA (CORRIGIDA):');
    console.log(`      - Tipologia: ${dadosEstruturados.tipologia}`);
    console.log(`      - √Årea: ${dadosEstruturados.areaConstruida}m¬≤`);
    console.log(`      - Valor/m¬≤: R$ ${orcamentoCalculado.valorPorM2.toLocaleString('pt-BR')}`);
    console.log(`      - Valor total: R$ ${orcamentoCalculado.valorTotal.toLocaleString('pt-BR')}`);
    console.log('');
    
    // 8. Calcular diferen√ßas
    const diferencaArea = ((dadosEstruturados.areaConstruida - logicaAntiga.area) / logicaAntiga.area) * 100;
    const diferencaValor = ((orcamentoCalculado.valorTotal - logicaAntiga.valorTotal) / logicaAntiga.valorTotal) * 100;
    
    console.log('üìä IMPACTO DAS CORRE√á√ïES:');
    console.log(`   üìê Diferen√ßa na √°rea: ${diferencaArea.toFixed(1)}% (${dadosEstruturados.areaConstruida - logicaAntiga.area}m¬≤)`);
    console.log(`   üí∞ Diferen√ßa no valor: ${diferencaValor.toFixed(1)}% (R$ ${(orcamentoCalculado.valorTotal - logicaAntiga.valorTotal).toLocaleString('pt-BR')})`);
    console.log(`   üè† Tipologia corrigida: ${logicaAntiga.tipologia} ‚Üí ${dadosEstruturados.tipologia}`);
    console.log('');
    
    // 9. Validar se os dados fazem sentido
    console.log('‚úÖ VALIDA√á√ÉO DOS DADOS:');
    const validacoes = [
      {
        nome: 'Tipologia coerente',
        valido: dadosEstruturados.tipologia === 'RESIDENCIAL',
        esperado: 'RESIDENCIAL',
        atual: dadosEstruturados.tipologia
      },
      {
        nome: '√Årea realista',
        valido: dadosEstruturados.areaConstruida >= 100 && dadosEstruturados.areaConstruida <= 500,
        esperado: '100-500m¬≤',
        atual: `${dadosEstruturados.areaConstruida}m¬≤`
      },
      {
        nome: 'Padr√£o identificado',
        valido: dadosEstruturados.padrao === 'alto',
        esperado: 'alto',
        atual: dadosEstruturados.padrao
      },
      {
        nome: 'Valor coerente',
        valido: orcamentoCalculado.valorPorM2 >= 2000 && orcamentoCalculado.valorPorM2 <= 4000,
        esperado: 'R$ 2.000-4.000/m¬≤',
        atual: `R$ ${orcamentoCalculado.valorPorM2.toLocaleString('pt-BR')}/m¬≤`
      }
    ];
    
    validacoes.forEach(validacao => {
      const status = validacao.valido ? '‚úÖ' : '‚ùå';
      console.log(`   ${status} ${validacao.nome}: ${validacao.atual} (esperado: ${validacao.esperado})`);
    });
    
    const validacoesPassaram = validacoes.filter(v => v.valido).length;
    const totalValidacoes = validacoes.length;
    
    console.log('');
    console.log(`üéØ RESULTADO FINAL: ${validacoesPassaram}/${totalValidacoes} valida√ß√µes passaram`);
    
    if (validacoesPassaram === totalValidacoes) {
      console.log('üéâ SUCESSO! A nova l√≥gica est√° funcionando corretamente!');
    } else {
      console.log('‚ö†Ô∏è Algumas valida√ß√µes falharam. Revisar l√≥gica.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testarNovaLogica();