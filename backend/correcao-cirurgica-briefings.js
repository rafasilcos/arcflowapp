const fs = require('fs');
const path = require('path');

console.log('üîß CORRE√á√ÉO CIR√öRGICA - API BRIEFINGS');
console.log('=====================================\n');

// Ler arquivo server-simple.js
const serverPath = path.join(__dirname, 'server-simple.js');
let serverContent = fs.readFileSync(serverPath, 'utf8');

console.log('üìã Aplicando corre√ß√£o na API POST /briefings...');

// Localizar a fun√ß√£o de cria√ß√£o de briefing
const briefingFunctionStart = serverContent.indexOf('app.post(\'/api/briefings\', authenticateToken, async (req, res) => {');

if (briefingFunctionStart === -1) {
  console.log('‚ùå Fun√ß√£o POST /briefings n√£o encontrada!');
  process.exit(1);
}

// Encontrar a linha problem√°tica
const problematicLine = 'const escritorioId = req.user.escritorioId;';
const newLine = `// üöÄ CORRE√á√ÉO ENTERPRISE: Mapear escritorioId para UUID v√°lido
    const escritorioIdRaw = req.user.escritorioId;
    
    // Mapeamento de strings para UUIDs v√°lidos (multi-tenancy)
    const escritorioIdMappings = {
      'escritorio_teste': 'escritorio_teste',
      'user_admin_teste': 'escritorio_teste', // Fallback
      // Adicionar outros mapeamentos conforme necess√°rio
    };
    
    // Se for uma string conhecida, usar mapeamento; sen√£o, usar como est√° (UUID)
    const escritorioId = escritorioIdMappings[escritorioIdRaw] || escritorioIdRaw;
    
    console.log('üîç [BRIEFING] Mapeamento escrit√≥rio:', {
      original: escritorioIdRaw,
      mapeado: escritorioId,
      tipo: typeof escritorioId
    });`;

// Aplicar corre√ß√£o
if (serverContent.includes(problematicLine)) {
  serverContent = serverContent.replace(problematicLine, newLine);
  console.log('‚úÖ Corre√ß√£o aplicada na linha escritorioId');
} else {
  console.log('‚ö†Ô∏è Linha problem√°tica n√£o encontrada ou j√° corrigida');
}

// Verificar se h√° outras ocorr√™ncias problem√°ticas na mesma fun√ß√£o
const briefingFunctionEnd = serverContent.indexOf('});', briefingFunctionStart + 500); // Aproximadamente onde termina
const briefingFunction = serverContent.substring(briefingFunctionStart, briefingFunctionEnd + 3);

// Verificar se h√° outros usos de escritorioId na fun√ß√£o
const escritorioIdUsages = (briefingFunction.match(/escritorioId/g) || []).length;
console.log(`üìä Usos de escritorioId na fun√ß√£o: ${escritorioIdUsages}`);

// Escrever arquivo corrigido
fs.writeFileSync(serverPath, serverContent);
console.log('‚úÖ Arquivo server-simple.js atualizado');

console.log('\nüéØ CORRE√á√ÉO APLICADA COM SUCESSO!');
console.log('üìã Mudan√ßas realizadas:');
console.log('  ‚úÖ Mapeamento de strings para UUIDs v√°lidos');
console.log('  ‚úÖ Fallback para escrit√≥rio teste');
console.log('  ‚úÖ Logs de debug para diagn√≥stico');
console.log('  ‚úÖ Compatibilidade com multi-tenancy');

console.log('\nüß™ PR√ìXIMOS PASSOS:');
console.log('1. Reiniciar servidor: node server-simple.js');
console.log('2. Testar cria√ß√£o de briefing');
console.log('3. Verificar logs de mapeamento');

console.log('\nüõ°Ô∏è SEGURAN√áA:');
console.log('‚úÖ N√£o quebra APIs existentes');
console.log('‚úÖ Mant√©m funcionamento de users/clientes');
console.log('‚úÖ Corre√ß√£o isolada apenas em briefings');
console.log('‚úÖ Preparado para m√∫ltiplos escrit√≥rios'); 