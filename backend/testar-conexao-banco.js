#!/usr/bin/env node

// SCRIPT DE TESTE DE CONEX√ÉO COM BANCO DE DADOS
// Diagn√≥stica problemas de conex√£o e configura√ß√£o

const { Client } = require('pg');
require('dotenv').config();

console.log('üîç DIAGN√ìSTICO DE CONEX√ÉO COM BANCO DE DADOS');
console.log('=' .repeat(50));

// Verificar vari√°veis de ambiente
console.log('\nüìã VARI√ÅVEIS DE AMBIENTE:');
console.log(`DATABASE_URL: ${process.env.DATABASE_URL ? 'DEFINIDA' : 'N√ÉO DEFINIDA'}`);
console.log(`DB_HOST: ${process.env.DB_HOST || 'N√ÉO DEFINIDA'}`);
console.log(`DB_PORT: ${process.env.DB_PORT || 'N√ÉO DEFINIDA'}`);
console.log(`DB_NAME: ${process.env.DB_NAME || 'N√ÉO DEFINIDA'}`);
console.log(`DB_USER: ${process.env.DB_USER || 'N√ÉO DEFINIDA'}`);
console.log(`DB_PASSWORD: ${process.env.DB_PASSWORD ? 'DEFINIDA' : 'N√ÉO DEFINIDA'}`);

// Configura√ß√µes de teste
const configs = [];

// Config 1: DATABASE_URL do .env
if (process.env.DATABASE_URL) {
  configs.push({
    nome: 'DATABASE_URL (.env)',
    config: {
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    }
  });
}

// Config 2: Vari√°veis individuais do .env
if (process.env.DB_HOST) {
  configs.push({
    nome: 'Vari√°veis individuais (.env)',
    config: {
      host: process.env.DB_HOST,
      port: process.env.DB_PORT || 5432,
      database: process.env.DB_NAME,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD
    }
  });
}

// Config 3: Padr√£o local
configs.push({
  nome: 'PostgreSQL Local (padr√£o)',
  config: {
    host: 'localhost',
    port: 5432,
    database: 'arcflow',
    user: 'postgres',
    password: 'postgres'
  }
});

// Config 4: Supabase direto
if (process.env.DATABASE_URL && process.env.DATABASE_URL.includes('supabase')) {
  configs.push({
    nome: 'Supabase (SSL obrigat√≥rio)',
    config: {
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    }
  });
}

// Testar cada configura√ß√£o
async function testarConexao(nome, config) {
  console.log(`\nüîÑ Testando: ${nome}`);
  
  const client = new Client(config);
  
  try {
    await client.connect();
    console.log(`  ‚úÖ Conex√£o estabelecida com sucesso!`);
    
    // Testar query simples
    const result = await client.query('SELECT NOW() as tempo_atual');
    console.log(`  ‚è∞ Tempo do servidor: ${result.rows[0].tempo_atual}`);
    
    // Verificar se as tabelas existem
    const tabelas = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('escritorios', 'users', 'clientes', 'briefings')
      ORDER BY table_name
    `);
    
    console.log(`  üìã Tabelas encontradas: ${tabelas.rows.map(r => r.table_name).join(', ')}`);
    
    if (tabelas.rows.length === 0) {
      console.log(`  ‚ö†Ô∏è  ATEN√á√ÉO: Nenhuma tabela do ArcFlow encontrada!`);
    }
    
    await client.end();
    return true;
    
  } catch (error) {
    console.log(`  ‚ùå Erro: ${error.message}`);
    
    // Diagn√≥stico espec√≠fico do erro
    if (error.code === 'ECONNREFUSED') {
      console.log(`  üí° Diagn√≥stico: Servidor PostgreSQL n√£o est√° rodando ou n√£o aceita conex√µes`);
    } else if (error.code === 'ENOTFOUND') {
      console.log(`  üí° Diagn√≥stico: Host n√£o encontrado - verifique o endere√ßo`);
    } else if (error.message.includes('password')) {
      console.log(`  üí° Diagn√≥stico: Problema de autentica√ß√£o - verifique usu√°rio/senha`);
    } else if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.log(`  üí° Diagn√≥stico: Banco de dados n√£o existe`);
    } else if (error.message.includes('SSL')) {
      console.log(`  üí° Diagn√≥stico: Problema de SSL - conex√£o remota pode precisar de SSL`);
    }
    
    try {
      await client.end();
    } catch (e) {
      // Ignorar erro ao fechar conex√£o que falhou
    }
    
    return false;
  }
}

async function main() {
  let conexaoSucesso = false;
  
  for (const { nome, config } of configs) {
    const sucesso = await testarConexao(nome, config);
    if (sucesso && !conexaoSucesso) {
      conexaoSucesso = true;
      console.log(`\nüéâ CONEX√ÉO FUNCIONANDO: ${nome}`);
    }
  }
  
  console.log('\n' + '=' .repeat(50));
  
  if (conexaoSucesso) {
    console.log('‚úÖ DIAGN√ìSTICO: Pelo menos uma configura√ß√£o funciona!');
    console.log('üí° PR√ìXIMO PASSO: Execute o script de preenchimento');
    console.log('   node script-preenchimento-briefings.js');
  } else {
    console.log('‚ùå DIAGN√ìSTICO: Nenhuma configura√ß√£o funcionou');
    console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
    console.log('1. Verificar se PostgreSQL est√° rodando:');
    console.log('   - Windows: Verificar servi√ßos do Windows');
    console.log('   - Linux/Mac: sudo systemctl status postgresql');
    console.log('');
    console.log('2. Verificar configura√ß√µes no .env:');
    console.log('   - DATABASE_URL correto');
    console.log('   - Credenciais v√°lidas');
    console.log('');
    console.log('3. Para Supabase:');
    console.log('   - SSL deve estar habilitado');
    console.log('   - Verificar se o projeto est√° ativo');
    console.log('');
    console.log('4. Criar banco local:');
    console.log('   createdb arcflow');
    console.log('   psql arcflow < schema.sql');
  }
}

main().catch(error => {
  console.error('üí• Erro fatal no diagn√≥stico:', error.message);
  process.exit(1);
});