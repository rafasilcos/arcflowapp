const axios = require('axios');

// ===== TESTE DAS APIS DE TEMPLATES DIN√ÇMICOS =====

const BASE_URL = 'http://localhost:3001/api/templates-dinamicos';

async function testarAPIs() {
  console.log('üß™ INICIANDO TESTES DAS APIS DE TEMPLATES DIN√ÇMICOS');
  console.log('='.repeat(60));

  try {
    // 1. TESTE HEALTH CHECK
    console.log('\n1Ô∏è‚É£ Testando Health Check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Health Check:', healthResponse.data);

    // 2. TESTE DETEC√á√ÉO DE NECESSIDADES
    console.log('\n2Ô∏è‚É£ Testando Detec√ß√£o de Necessidades...');
    const briefingData = {
      tipologia: 'residencial',
      subtipo: 'unifamiliar',
      descricao: 'Casa de 3 quartos com √°rea de lazer, piscina e jardim',
      area: 250,
      orcamento: 500000,
      prioridades: ['estrutural', 'instalacoes', 'paisagismo'],
      complexidade: 'media'
    };

    const deteccaoResponse = await axios.post(`${BASE_URL}/detectar`, {
      briefingData
    });
    console.log('‚úÖ Detec√ß√£o conclu√≠da:');
    console.log(`   Templates Principais: ${deteccaoResponse.data.data.templatesPrincipais.length}`);
    console.log(`   Templates Complementares: ${deteccaoResponse.data.data.templatesComplementares.length}`);
    console.log(`   Templates Opcionais: ${deteccaoResponse.data.data.templatesOpcionais.length}`);
    console.log(`   Complexidade: ${deteccaoResponse.data.data.complexidade}`);

    // 3. TESTE SIMULA√á√ÉO DE PROJETO
    console.log('\n3Ô∏è‚É£ Testando Simula√ß√£o de Projeto...');
    const simulacaoResponse = await axios.post(`${BASE_URL}/simular`, {
      briefingData,
      configuracao: {
        incluirOpcionais: true,
        scoreMinimo: 0.6
      }
    });
    console.log('‚úÖ Simula√ß√£o conclu√≠da:');
    console.log(`   Total Atividades: ${simulacaoResponse.data.data.resumo.totalAtividades}`);
    console.log(`   Dura√ß√£o Estimada: ${simulacaoResponse.data.data.resumo.duracaoEstimada} dias`);
    console.log(`   Or√ßamento Estimado: R$ ${simulacaoResponse.data.data.resumo.orcamentoEstimado.toLocaleString()}`);

    // 4. TESTE GERA√á√ÉO DE PROJETO COMPLETO
    console.log('\n4Ô∏è‚É£ Testando Gera√ß√£o de Projeto Completo...');
    const projetoId = `test_${Date.now()}`;
    const projetoResponse = await axios.post(`${BASE_URL}/gerar-projeto`, {
      projetoId,
      briefingData,
      configuracao: {
        incluirOpcionais: true
      }
    });
    console.log('‚úÖ Projeto gerado:');
    console.log(`   ID: ${projetoResponse.data.data.projetoComposto.id}`);
    console.log(`   Total Atividades: ${projetoResponse.data.data.projetoComposto.atividades.length}`);
    console.log(`   Or√ßamento Total: R$ ${projetoResponse.data.data.projetoComposto.orcamento.total.toLocaleString()}`);

    // 5. TESTE OBTER CRONOGRAMA
    console.log('\n5Ô∏è‚É£ Testando Obten√ß√£o de Cronograma...');
    const cronogramaResponse = await axios.get(`${BASE_URL}/cronograma/${projetoId}`);
    console.log('‚úÖ Cronograma obtido:');
    console.log(`   Total Atividades: ${cronogramaResponse.data.data.metadados.totalAtividades}`);
    console.log(`   Dura√ß√£o Total: ${cronogramaResponse.data.data.metadados.duracaoTotal} dias`);

    // 6. TESTE OBTER PROJETO COMPLETO
    console.log('\n6Ô∏è‚É£ Testando Obten√ß√£o de Projeto Completo...');
    const projetoCompletoResponse = await axios.get(`${BASE_URL}/projeto/${projetoId}`);
    console.log('‚úÖ Projeto obtido do cache:');
    console.log(`   Cached: ${projetoCompletoResponse.data.meta.cached}`);
    console.log(`   Response Time: ${projetoCompletoResponse.data.meta.responseTime}ms`);

    // 7. TESTE M√âTRICAS
    console.log('\n7Ô∏è‚É£ Testando M√©tricas do Sistema...');
    const metricasResponse = await axios.get(`${BASE_URL}/metricas`);
    console.log('‚úÖ M√©tricas obtidas:');
    console.log(`   Templates Processados: ${metricasResponse.data.data.sistema.templatesProcessados}`);
    console.log(`   Taxa de Sucesso: ${(metricasResponse.data.data.sistema.taxaSucesso * 100).toFixed(1)}%`);

    console.log('\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!');
    console.log('='.repeat(60));

  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.response?.data || error.message);
    console.log('\nüí° POSS√çVEIS CAUSAS:');
    console.log('   - Servidor n√£o est√° rodando na porta 3001');
    console.log('   - Algum servi√ßo (Templates Engine) com erro');
    console.log('   - Configura√ß√£o de CORS ou middleware');
    console.log('\nüîß SOLU√á√ÉO:');
    console.log('   1. Verificar se o servidor est√° rodando: npm run dev');
    console.log('   2. Verificar logs do servidor');
    console.log('   3. Verificar se todas as depend√™ncias est√£o instaladas');
  }
}

// Executar testes
testarAPIs(); 