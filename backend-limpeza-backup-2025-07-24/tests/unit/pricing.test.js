/**\n * TESTES UNITÁRIOS DE PRECIFICAÇÃO - ARCFLOW\n * \n * Testa se os valores gerados estão dentro de faixas realistas\n * Valida cenários específicos de casa, apartamento e sobrado\n */\n\nconst { Pool } = require('pg');\nconst RealisticPricingEngine = require('../../src/services/realisticPricingEngine').default;\nconst ComplexityAnalyzer = require('../../src/services/complexityAnalyzer').default;\nconst MarketValidator = require('../../src/services/marketValidator').default;\n\n// Mock do pool de conexão\nconst mockPool = {\n  query: jest.fn()\n};\n\ndescribe('Sistema de Precificação Realista', () => {\n  let pricingEngine;\n  let complexityAnalyzer;\n  let marketValidator;\n\n  beforeEach(() => {\n    pricingEngine = new RealisticPricingEngine(mockPool);\n    complexityAnalyzer = new ComplexityAnalyzer();\n    marketValidator = new MarketValidator(mockPool);\n    \n    // Reset mocks\n    jest.clearAllMocks();\n    \n    // Mock padrão para pricing_base\n    mockPool.query.mockResolvedValue({\n      rows: [\n        {\n          disciplina: 'ARQUITETURA',\n          price_min: 80,\n          price_max: 200,\n          price_average: 140\n        },\n        {\n          disciplina: 'ESTRUTURAL',\n          price_min: 40,\n          price_max: 100,\n          price_average: 70\n        }\n      ]\n    });\n  });\n\n  describe('Análise de Complexidade', () => {\n    test('deve classificar casa simples como SIMPLES', () => {\n      const request = {\n        briefingId: 'test-1',\n        tipologia: 'RESIDENCIAL',\n        area: 120,\n        respostas: {\n          'tipo_construcao': 'casa simples',\n          'terreno': 'plano',\n          'acabamento': 'básico'\n        },\n        caracteristicasEspeciais: []\n      };\n\n      const result = complexityAnalyzer.analyzeComplexity(request);\n      \n      expect(result.level).toBe('SIMPLES');\n      expect(result.multiplier).toBe(0.8);\n      expect(result.score).toBeLessThan(30);\n    });\n\n    test('deve classificar sobrado com piscina como COMPLEXO', () => {\n      const request = {\n        briefingId: 'test-2',\n        tipologia: 'RESIDENCIAL',\n        area: 350,\n        respostas: {\n          'tipo_construcao': 'sobrado',\n          'piscina': 'sim, aquecida',\n          'elevador': 'sim',\n          'automacao': 'completa',\n          'acabamento': 'alto padrão'\n        },\n        caracteristicasEspeciais: ['piscina', 'elevador', 'automação']\n      };\n\n      const result = complexityAnalyzer.analyzeComplexity(request);\n      \n      expect(result.level).toBe('COMPLEXO');\n      expect(result.multiplier).toBe(1.5);\n      expect(result.score).toBeGreaterThan(60);\n    });\n\n    test('deve identificar fatores de complexidade corretamente', () => {\n      const request = {\n        briefingId: 'test-3',\n        tipologia: 'RESIDENCIAL',\n        area: 200,\n        respostas: {\n          'piscina': 'sim',\n          'pavimentos': '3'\n        },\n        caracteristicasEspeciais: ['piscina']\n      };\n\n      const result = complexityAnalyzer.analyzeComplexity(request);\n      \n      const fatoresEncontrados = result.factors.map(f => f.name);\n      expect(fatoresEncontrados).toContain('PISCINA');\n      expect(fatoresEncontrados).toContain('MULTIPLOS_PAVIMENTOS');\n    });\n  });\n\n  describe('Engine de Precificação', () => {\n    test('casa simples 120m² deve custar entre R$ 9.600-18.000', async () => {\n      const request = {\n        briefingId: 'test-casa-simples',\n        tipologia: 'RESIDENCIAL',\n        area: 120,\n        complexidade: 'SIMPLES',\n        disciplinas: ['ARQUITETURA'],\n        caracteristicasEspeciais: [],\n        localizacao: 'INTERIOR'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      // Validar faixa de preços\n      expect(result.valorTotal).toBeGreaterThanOrEqual(9600);\n      expect(result.valorTotal).toBeLessThanOrEqual(18000);\n      \n      // Validar valor por m²\n      expect(result.valorPorM2).toBeGreaterThanOrEqual(80);\n      expect(result.valorPorM2).toBeLessThanOrEqual(150);\n      \n      // Validar estrutura da resposta\n      expect(result).toHaveProperty('valorTotal');\n      expect(result).toHaveProperty('valorPorM2');\n      expect(result).toHaveProperty('detalhamento');\n      expect(result).toHaveProperty('complexidadeAplicada');\n    });\n\n    test('apartamento médio 200m² deve custar entre R$ 30.000-50.000', async () => {\n      const request = {\n        briefingId: 'test-apartamento-medio',\n        tipologia: 'RESIDENCIAL',\n        area: 200,\n        complexidade: 'MEDIO',\n        disciplinas: ['ARQUITETURA', 'ESTRUTURAL'],\n        caracteristicasEspeciais: [],\n        localizacao: 'CAPITAL'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      // Validar faixa de preços\n      expect(result.valorTotal).toBeGreaterThanOrEqual(30000);\n      expect(result.valorTotal).toBeLessThanOrEqual(50000);\n      \n      // Validar valor por m²\n      expect(result.valorPorM2).toBeGreaterThanOrEqual(150);\n      expect(result.valorPorM2).toBeLessThanOrEqual(250);\n    });\n\n    test('sobrado luxo 350m² deve custar entre R$ 87.500-140.000', async () => {\n      const request = {\n        briefingId: 'test-sobrado-luxo',\n        tipologia: 'RESIDENCIAL',\n        area: 350,\n        complexidade: 'COMPLEXO',\n        disciplinas: ['ARQUITETURA', 'ESTRUTURAL', 'INSTALACOES'],\n        caracteristicasEspeciais: ['piscina', 'elevador', 'automação'],\n        localizacao: 'CAPITAL'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      // Validar faixa de preços\n      expect(result.valorTotal).toBeGreaterThanOrEqual(87500);\n      expect(result.valorTotal).toBeLessThanOrEqual(140000);\n      \n      // Validar valor por m²\n      expect(result.valorPorM2).toBeGreaterThanOrEqual(250);\n      expect(result.valorPorM2).toBeLessThanOrEqual(400);\n    });\n\n    test('deve aplicar multiplicador de localização corretamente', async () => {\n      const requestInterior = {\n        briefingId: 'test-interior',\n        tipologia: 'RESIDENCIAL',\n        area: 150,\n        complexidade: 'MEDIO',\n        disciplinas: ['ARQUITETURA'],\n        caracteristicasEspeciais: [],\n        localizacao: 'INTERIOR'\n      };\n\n      const requestCapital = {\n        ...requestInterior,\n        briefingId: 'test-capital',\n        localizacao: 'CAPITAL'\n      };\n\n      const resultInterior = await pricingEngine.calculateRealisticBudget(requestInterior);\n      const resultCapital = await pricingEngine.calculateRealisticBudget(requestCapital);\n      \n      // Capital deve ser mais caro que interior\n      expect(resultCapital.valorTotal).toBeGreaterThan(resultInterior.valorTotal);\n      \n      // Diferença deve ser de aproximadamente 20%\n      const diferenca = (resultCapital.valorTotal - resultInterior.valorTotal) / resultInterior.valorTotal;\n      expect(diferenca).toBeGreaterThan(0.15);\n      expect(diferenca).toBeLessThan(0.25);\n    });\n\n    test('deve incluir todas as disciplinas no detalhamento', async () => {\n      const request = {\n        briefingId: 'test-disciplinas',\n        tipologia: 'RESIDENCIAL',\n        area: 200,\n        complexidade: 'MEDIO',\n        disciplinas: ['ARQUITETURA', 'ESTRUTURAL', 'INSTALACOES'],\n        caracteristicasEspeciais: [],\n        localizacao: 'INTERIOR'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      expect(result.detalhamento).toHaveProperty('ARQUITETURA');\n      expect(result.detalhamento).toHaveProperty('ESTRUTURAL');\n      expect(result.detalhamento).toHaveProperty('INSTALACOES');\n      \n      // Cada disciplina deve ter valor > 0\n      Object.values(result.detalhamento).forEach(valor => {\n        expect(valor).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('Validação de Mercado', () => {\n    beforeEach(() => {\n      // Mock para benchmarks\n      mockPool.query.mockResolvedValue({\n        rows: [\n          {\n            tipologia: 'RESIDENCIAL',\n            disciplina: 'ARQUITETURA',\n            complexidade: 'MEDIO',\n            valor_minimo: 100,\n            valor_maximo: 200,\n            valor_medio: 150\n          }\n        ]\n      });\n    });\n\n    test('deve validar preço dentro da faixa como válido', async () => {\n      const request = {\n        briefingId: 'test-valido',\n        tipologia: 'RESIDENCIAL',\n        area: 150,\n        valorTotal: 22500, // R$ 150/m² - dentro da faixa\n        valorPorM2: 150,\n        disciplinas: ['ARQUITETURA'],\n        complexidade: 'MEDIO'\n      };\n\n      const result = await marketValidator.validatePrice(request);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.warnings).toHaveLength(0);\n      expect(result.marketComparison.position).toBe('WITHIN');\n    });\n\n    test('deve detectar preço muito baixo', async () => {\n      const request = {\n        briefingId: 'test-baixo',\n        tipologia: 'RESIDENCIAL',\n        area: 150,\n        valorTotal: 3000, // R$ 20/m² - muito baixo\n        valorPorM2: 20,\n        disciplinas: ['ARQUITETURA'],\n        complexidade: 'MEDIO'\n      };\n\n      const result = await marketValidator.validatePrice(request);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.warnings.length).toBeGreaterThan(0);\n      expect(result.warnings[0]).toContain('muito baixo');\n      expect(result.marketComparison.position).toBe('BELOW');\n    });\n\n    test('deve detectar preço muito alto', async () => {\n      const request = {\n        briefingId: 'test-alto',\n        tipologia: 'RESIDENCIAL',\n        area: 150,\n        valorTotal: 90000, // R$ 600/m² - muito alto\n        valorPorM2: 600,\n        disciplinas: ['ARQUITETURA'],\n        complexidade: 'MEDIO'\n      };\n\n      const result = await marketValidator.validatePrice(request);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.warnings.length).toBeGreaterThan(0);\n      expect(result.warnings[0]).toContain('muito alto');\n      expect(result.marketComparison.position).toBe('ABOVE');\n    });\n\n    test('deve gerar sugestões para preços inválidos', async () => {\n      const request = {\n        briefingId: 'test-sugestoes',\n        tipologia: 'RESIDENCIAL',\n        area: 150,\n        valorTotal: 1500, // Muito baixo\n        valorPorM2: 10,\n        disciplinas: ['ARQUITETURA'],\n        complexidade: 'MEDIO'\n      };\n\n      const result = await marketValidator.validatePrice(request);\n      \n      expect(result.suggestions.length).toBeGreaterThan(0);\n      expect(result.suggestions.some(s => s.includes('ajustar o valor'))).toBe(true);\n    });\n  });\n\n  describe('Integração Completa', () => {\n    test('deve gerar orçamento realista completo', async () => {\n      // Simular briefing completo\n      const briefingData = {\n        tipologia: 'RESIDENCIAL',\n        area: 180,\n        respostas: {\n          'tipo_construcao': 'casa térrea',\n          'terreno': 'plano',\n          'acabamento': 'médio padrão',\n          'piscina': 'não'\n        },\n        caracteristicasEspeciais: []\n      };\n\n      // 1. Analisar complexidade\n      const complexityResult = complexityAnalyzer.analyzeComplexity({\n        briefingId: 'test-integracao',\n        tipologia: briefingData.tipologia,\n        area: briefingData.area,\n        respostas: briefingData.respostas,\n        caracteristicasEspeciais: briefingData.caracteristicasEspeciais\n      });\n\n      // 2. Calcular orçamento\n      const pricingResult = await pricingEngine.calculateRealisticBudget({\n        briefingId: 'test-integracao',\n        tipologia: briefingData.tipologia,\n        area: briefingData.area,\n        complexidade: complexityResult.level,\n        disciplinas: ['ARQUITETURA'],\n        caracteristicasEspeciais: briefingData.caracteristicasEspeciais,\n        localizacao: 'INTERIOR'\n      });\n\n      // 3. Validar resultado\n      const validationResult = await marketValidator.validatePrice({\n        briefingId: 'test-integracao',\n        tipologia: briefingData.tipologia,\n        area: briefingData.area,\n        valorTotal: pricingResult.valorTotal,\n        valorPorM2: pricingResult.valorPorM2,\n        disciplinas: ['ARQUITETURA'],\n        complexidade: complexityResult.level\n      });\n\n      // Validações finais\n      expect(complexityResult.level).toBeDefined();\n      expect(pricingResult.valorTotal).toBeGreaterThan(0);\n      expect(pricingResult.valorPorM2).toBeGreaterThan(50);\n      expect(pricingResult.valorPorM2).toBeLessThan(500);\n      expect(validationResult.isValid).toBe(true);\n    });\n  });\n\n  describe('Casos Extremos', () => {\n    test('deve lidar com área muito pequena', async () => {\n      const request = {\n        briefingId: 'test-pequeno',\n        tipologia: 'RESIDENCIAL',\n        area: 30, // Muito pequeno\n        complexidade: 'SIMPLES',\n        disciplinas: ['ARQUITETURA'],\n        caracteristicasEspeciais: [],\n        localizacao: 'INTERIOR'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      expect(result.valorTotal).toBeGreaterThan(0);\n      expect(result.valorPorM2).toBeGreaterThan(50);\n    });\n\n    test('deve lidar com área muito grande', async () => {\n      const request = {\n        briefingId: 'test-grande',\n        tipologia: 'RESIDENCIAL',\n        area: 2000, // Muito grande\n        complexidade: 'COMPLEXO',\n        disciplinas: ['ARQUITETURA', 'ESTRUTURAL', 'INSTALACOES'],\n        caracteristicasEspeciais: ['área muito grande'],\n        localizacao: 'CAPITAL'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      expect(result.valorTotal).toBeGreaterThan(0);\n      expect(result.valorPorM2).toBeLessThan(500); // Não deve ser absurdo\n    });\n\n    test('deve lidar com tipologia não reconhecida', async () => {\n      const request = {\n        briefingId: 'test-desconhecido',\n        tipologia: 'DESCONHECIDO',\n        area: 150,\n        complexidade: 'MEDIO',\n        disciplinas: ['ARQUITETURA'],\n        caracteristicasEspeciais: [],\n        localizacao: 'INTERIOR'\n      };\n\n      const result = await pricingEngine.calculateRealisticBudget(request);\n      \n      // Deve usar valores padrão\n      expect(result.valorTotal).toBeGreaterThan(0);\n      expect(result.valorPorM2).toBeGreaterThan(50);\n      expect(result.valorPorM2).toBeLessThan(500);\n    });\n  });\n});\n\n// Testes de performance\ndescribe('Performance do Sistema de Precificação', () => {\n  test('deve calcular orçamento em menos de 1 segundo', async () => {\n    const pricingEngine = new RealisticPricingEngine(mockPool);\n    \n    mockPool.query.mockResolvedValue({\n      rows: [{\n        disciplina: 'ARQUITETURA',\n        price_min: 100,\n        price_max: 200,\n        price_average: 150\n      }]\n    });\n\n    const request = {\n      briefingId: 'test-performance',\n      tipologia: 'RESIDENCIAL',\n      area: 200,\n      complexidade: 'MEDIO',\n      disciplinas: ['ARQUITETURA'],\n      caracteristicasEspeciais: [],\n      localizacao: 'INTERIOR'\n    };\n\n    const startTime = Date.now();\n    await pricingEngine.calculateRealisticBudget(request);\n    const endTime = Date.now();\n    \n    const executionTime = endTime - startTime;\n    expect(executionTime).toBeLessThan(1000); // Menos de 1 segundo\n  });\n});