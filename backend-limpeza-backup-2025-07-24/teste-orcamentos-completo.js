const { Client } = require('pg');
const axios = require('axios');

const DATABASE_URL = "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres";
const API_URL = 'http://localhost:3001/api';

const client = new Client({
  connectionString: DATABASE_URL
});

let authToken = null;

console.log('üß™ ===== TESTE COMPLETO SISTEMA OR√áAMENTOS ARCFLOW =====\n');

async function testeCompleto() {
  try {
    // 1. Testar conex√£o com banco
    console.log('1Ô∏è‚É£ Testando conex√£o com banco de dados...');
    await client.connect();
    
    // Verificar se tabela orcamentos existe
    const tabelaResult = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'orcamentos' 
      ORDER BY ordinal_position
    `);
    
    if (tabelaResult.rows.length === 0) {
      console.log('‚ùå Tabela orcamentos n√£o encontrada!');
      return;
    }
    
    console.log('‚úÖ Tabela orcamentos encontrada!');
    console.log('üìä Colunas:', tabelaResult.rows.map(r => r.column_name).join(', '));
    
    // 2. Testar autentica√ß√£o
    console.log('\n2Ô∏è‚É£ Testando login...');
    try {
      const loginResponse = await axios.post(`${API_URL}/auth/login`, {
        email: 'admin@arcflow.com',
        password: '123456'
      });
      
      authToken = loginResponse.data.tokens.accessToken;
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('üë§ Usu√°rio:', loginResponse.data.user.nome);
      console.log('üè¢ Escrit√≥rio:', loginResponse.data.escritorio.nome);
    } catch (error) {
      console.log('‚ùå Erro no login:', error.response?.data?.error || error.message);
      return;
    }
    
    // 3. Buscar briefings existentes
    console.log('\n3Ô∏è‚É£ Buscando briefings...');
    try {
      const briefingsResponse = await axios.get(`${API_URL}/briefings`, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      
      console.log('‚úÖ Briefings encontrados:', briefingsResponse.data.briefings?.length || 0);
      
      if (briefingsResponse.data.briefings?.length > 0) {
        const briefing = briefingsResponse.data.briefings[0];
        console.log('üìã Primeiro briefing:', briefing.nome);
        
        // 4. Testar gera√ß√£o de or√ßamento
        console.log('\n4Ô∏è‚É£ Testando gera√ß√£o de or√ßamento...');
        try {
          const orcamentoResponse = await axios.post(`${API_URL}/orcamentos/gerar-briefing/${briefing.id}`, {}, {
            headers: { Authorization: `Bearer ${authToken}` }
          });
          
          console.log('‚úÖ Or√ßamento gerado com sucesso!');
          console.log('üí∞ C√≥digo:', orcamentoResponse.data.orcamento.codigo);
          console.log('üí∞ Valor Total:', orcamentoResponse.data.orcamento.valorTotal);
          console.log('üìê √Årea:', orcamentoResponse.data.orcamento.areaConstruida, 'm¬≤');
          
          const orcamentoId = orcamentoResponse.data.orcamento.id;
          
          // 5. Verificar se foi salvo no banco
          console.log('\n5Ô∏è‚É£ Verificando no banco de dados...');
          const dbResult = await client.query('SELECT * FROM orcamentos WHERE id = $1', [orcamentoId]);
          
          if (dbResult.rows.length > 0) {
            console.log('‚úÖ Or√ßamento salvo no banco!');
            console.log('üìä Dados do banco:');
            console.log('   - ID:', dbResult.rows[0].id);
            console.log('   - C√≥digo:', dbResult.rows[0].codigo);
            console.log('   - Nome:', dbResult.rows[0].nome);
            console.log('   - Valor:', dbResult.rows[0].valor_total);
            console.log('   - Status:', dbResult.rows[0].status);
          } else {
            console.log('‚ùå Or√ßamento n√£o encontrado no banco!');
          }
          
          // 6. Testar busca de or√ßamento
          console.log('\n6Ô∏è‚É£ Testando busca de or√ßamento...');
          try {
            const getOrcamentoResponse = await axios.get(`${API_URL}/orcamentos/${orcamentoId}`, {
              headers: { Authorization: `Bearer ${authToken}` }
            });
            
            console.log('‚úÖ Busca de or√ßamento funcionando!');
            console.log('üìã Or√ßamento encontrado:', getOrcamentoResponse.data.orcamento.nome);
          } catch (error) {
            console.log('‚ùå Erro na busca:', error.response?.data?.error || error.message);
          }
          
          // 7. Testar listagem de or√ßamentos
          console.log('\n7Ô∏è‚É£ Testando listagem de or√ßamentos...');
          try {
            const listOrcamentosResponse = await axios.get(`${API_URL}/orcamentos`, {
              headers: { Authorization: `Bearer ${authToken}` }
            });
            
            console.log('‚úÖ Listagem funcionando!');
            console.log('üìä Total de or√ßamentos:', listOrcamentosResponse.data.orcamentos?.length || 0);
          } catch (error) {
            console.log('‚ùå Erro na listagem:', error.response?.data?.error || error.message);
          }
          
        } catch (error) {
          console.log('‚ùå Erro na gera√ß√£o de or√ßamento:', error.response?.data?.error || error.message);
          console.log('üîç Detalhes:', error.response?.data);
        }
        
      } else {
        console.log('‚ö†Ô∏è Nenhum briefing encontrado para teste');
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao buscar briefings:', error.response?.data?.error || error.message);
    }
    
    // 8. Teste de performance - m√∫ltiplas requisi√ß√µes
    console.log('\n8Ô∏è‚É£ Teste de performance b√°sico...');
    try {
      const startTime = Date.now();
      const promises = [];
      
      // Fazer 10 requisi√ß√µes simult√¢neas
      for (let i = 0; i < 10; i++) {
        promises.push(
          axios.get(`${API_URL}/auth/me`, {
            headers: { Authorization: `Bearer ${authToken}` }
          })
        );
      }
      
      await Promise.all(promises);
      const endTime = Date.now();
      
      console.log('‚úÖ Performance OK!');
      console.log('‚ö° 10 requisi√ß√µes em:', (endTime - startTime), 'ms');
      console.log('üìä M√©dia por requisi√ß√£o:', Math.round((endTime - startTime) / 10), 'ms');
      
    } catch (error) {
      console.log('‚ùå Erro no teste de performance:', error.message);
    }
    
    console.log('\nüéâ ===== TESTE COMPLETO FINALIZADO =====');
    console.log('‚úÖ Sistema funcionando com dados reais!');
    console.log('‚úÖ Banco PostgreSQL conectado!');
    console.log('‚úÖ APIs de or√ßamento operacionais!');
    console.log('‚úÖ Fluxo Briefing ‚Üí Or√ßamento funcional!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  } finally {
    await client.end();
  }
}

testeCompleto(); 
const axios = require('axios');

const DATABASE_URL = "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres";
const API_URL = 'http://localhost:3001/api';

const client = new Client({
  connectionString: DATABASE_URL
});

let authToken = null;

console.log('üß™ ===== TESTE COMPLETO SISTEMA OR√áAMENTOS ARCFLOW =====\n');

async function testeCompleto() {
  try {
    // 1. Testar conex√£o com banco
    console.log('1Ô∏è‚É£ Testando conex√£o com banco de dados...');
    await client.connect();
    
    // Verificar se tabela orcamentos existe
    const tabelaResult = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'orcamentos' 
      ORDER BY ordinal_position
    `);
    
    if (tabelaResult.rows.length === 0) {
      console.log('‚ùå Tabela orcamentos n√£o encontrada!');
      return;
    }
    
    console.log('‚úÖ Tabela orcamentos encontrada!');
    console.log('üìä Colunas:', tabelaResult.rows.map(r => r.column_name).join(', '));
    
    // 2. Testar autentica√ß√£o
    console.log('\n2Ô∏è‚É£ Testando login...');
    try {
      const loginResponse = await axios.post(`${API_URL}/auth/login`, {
        email: 'admin@arcflow.com',
        password: '123456'
      });
      
      authToken = loginResponse.data.tokens.accessToken;
      console.log('‚úÖ Login realizado com sucesso!');
      console.log('üë§ Usu√°rio:', loginResponse.data.user.nome);
      console.log('üè¢ Escrit√≥rio:', loginResponse.data.escritorio.nome);
    } catch (error) {
      console.log('‚ùå Erro no login:', error.response?.data?.error || error.message);
      return;
    }
    
    // 3. Buscar briefings existentes
    console.log('\n3Ô∏è‚É£ Buscando briefings...');
    try {
      const briefingsResponse = await axios.get(`${API_URL}/briefings`, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      
      console.log('‚úÖ Briefings encontrados:', briefingsResponse.data.briefings?.length || 0);
      
      if (briefingsResponse.data.briefings?.length > 0) {
        const briefing = briefingsResponse.data.briefings[0];
        console.log('üìã Primeiro briefing:', briefing.nome);
        
        // 4. Testar gera√ß√£o de or√ßamento
        console.log('\n4Ô∏è‚É£ Testando gera√ß√£o de or√ßamento...');
        try {
          const orcamentoResponse = await axios.post(`${API_URL}/orcamentos/gerar-briefing/${briefing.id}`, {}, {
            headers: { Authorization: `Bearer ${authToken}` }
          });
          
          console.log('‚úÖ Or√ßamento gerado com sucesso!');
          console.log('üí∞ C√≥digo:', orcamentoResponse.data.orcamento.codigo);
          console.log('üí∞ Valor Total:', orcamentoResponse.data.orcamento.valorTotal);
          console.log('üìê √Årea:', orcamentoResponse.data.orcamento.areaConstruida, 'm¬≤');
          
          const orcamentoId = orcamentoResponse.data.orcamento.id;
          
          // 5. Verificar se foi salvo no banco
          console.log('\n5Ô∏è‚É£ Verificando no banco de dados...');
          const dbResult = await client.query('SELECT * FROM orcamentos WHERE id = $1', [orcamentoId]);
          
          if (dbResult.rows.length > 0) {
            console.log('‚úÖ Or√ßamento salvo no banco!');
            console.log('üìä Dados do banco:');
            console.log('   - ID:', dbResult.rows[0].id);
            console.log('   - C√≥digo:', dbResult.rows[0].codigo);
            console.log('   - Nome:', dbResult.rows[0].nome);
            console.log('   - Valor:', dbResult.rows[0].valor_total);
            console.log('   - Status:', dbResult.rows[0].status);
          } else {
            console.log('‚ùå Or√ßamento n√£o encontrado no banco!');
          }
          
          // 6. Testar busca de or√ßamento
          console.log('\n6Ô∏è‚É£ Testando busca de or√ßamento...');
          try {
            const getOrcamentoResponse = await axios.get(`${API_URL}/orcamentos/${orcamentoId}`, {
              headers: { Authorization: `Bearer ${authToken}` }
            });
            
            console.log('‚úÖ Busca de or√ßamento funcionando!');
            console.log('üìã Or√ßamento encontrado:', getOrcamentoResponse.data.orcamento.nome);
          } catch (error) {
            console.log('‚ùå Erro na busca:', error.response?.data?.error || error.message);
          }
          
          // 7. Testar listagem de or√ßamentos
          console.log('\n7Ô∏è‚É£ Testando listagem de or√ßamentos...');
          try {
            const listOrcamentosResponse = await axios.get(`${API_URL}/orcamentos`, {
              headers: { Authorization: `Bearer ${authToken}` }
            });
            
            console.log('‚úÖ Listagem funcionando!');
            console.log('üìä Total de or√ßamentos:', listOrcamentosResponse.data.orcamentos?.length || 0);
          } catch (error) {
            console.log('‚ùå Erro na listagem:', error.response?.data?.error || error.message);
          }
          
        } catch (error) {
          console.log('‚ùå Erro na gera√ß√£o de or√ßamento:', error.response?.data?.error || error.message);
          console.log('üîç Detalhes:', error.response?.data);
        }
        
      } else {
        console.log('‚ö†Ô∏è Nenhum briefing encontrado para teste');
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao buscar briefings:', error.response?.data?.error || error.message);
    }
    
    // 8. Teste de performance - m√∫ltiplas requisi√ß√µes
    console.log('\n8Ô∏è‚É£ Teste de performance b√°sico...');
    try {
      const startTime = Date.now();
      const promises = [];
      
      // Fazer 10 requisi√ß√µes simult√¢neas
      for (let i = 0; i < 10; i++) {
        promises.push(
          axios.get(`${API_URL}/auth/me`, {
            headers: { Authorization: `Bearer ${authToken}` }
          })
        );
      }
      
      await Promise.all(promises);
      const endTime = Date.now();
      
      console.log('‚úÖ Performance OK!');
      console.log('‚ö° 10 requisi√ß√µes em:', (endTime - startTime), 'ms');
      console.log('üìä M√©dia por requisi√ß√£o:', Math.round((endTime - startTime) / 10), 'ms');
      
    } catch (error) {
      console.log('‚ùå Erro no teste de performance:', error.message);
    }
    
    console.log('\nüéâ ===== TESTE COMPLETO FINALIZADO =====');
    console.log('‚úÖ Sistema funcionando com dados reais!');
    console.log('‚úÖ Banco PostgreSQL conectado!');
    console.log('‚úÖ APIs de or√ßamento operacionais!');
    console.log('‚úÖ Fluxo Briefing ‚Üí Or√ßamento funcional!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  } finally {
    await client.end();
  }
}

testeCompleto(); 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 