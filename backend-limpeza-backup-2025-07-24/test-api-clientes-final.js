const axios = require('axios');

const API_URL = 'http://localhost:3001/api';

async function testClientesAPI() {
  try {
    console.log('üöÄ Testando API de Clientes...\n');

    // 1. Testar health check
    console.log('1. üè• Testando health check...');
    const health = await axios.get(`${API_URL}/health`);
    console.log('‚úÖ Health check OK:', health.data.status);

    // 2. Testar listagem de clientes
    console.log('\n2. üìã Testando listagem de clientes...');
    const listaClientes = await axios.get(`${API_URL}/clientes`);
    console.log('‚úÖ Listagem OK:', listaClientes.data.clientes.length, 'clientes encontrados');
    console.log('üìä Pagina√ß√£o:', listaClientes.data.pagination);

    // 3. Testar cria√ß√£o de cliente
    console.log('\n3. ‚ûï Testando cria√ß√£o de cliente...');
    const novoCliente = {
      nome: 'Maria Silva Teste API',
      email: 'maria.api@teste.com',
      telefone: '(11) 99999-1234',
      tipoPessoa: 'fisica',
      cpf: '987.654.321-00',
      endereco: {
        cep: '01234-567',
        logradouro: 'Rua API, 123',
        bairro: 'Centro',
        cidade: 'S√£o Paulo',
        uf: 'SP'
      },
      observacoes: 'Cliente criado via teste da API',
      status: 'ativo'
    };

    const clienteCriado = await axios.post(`${API_URL}/clientes`, novoCliente);
    console.log('‚úÖ Cliente criado:', clienteCriado.data.cliente.id);
    console.log('üìù Nome:', clienteCriado.data.cliente.nome);

    const clienteId = clienteCriado.data.cliente.id;

    // 4. Testar busca de cliente espec√≠fico
    console.log('\n4. üîç Testando busca de cliente espec√≠fico...');
    const clienteEspecifico = await axios.get(`${API_URL}/clientes/${clienteId}`);
    console.log('‚úÖ Cliente encontrado:', clienteEspecifico.data.cliente.nome);

    // 5. Testar atualiza√ß√£o de cliente
    console.log('\n5. ‚úèÔ∏è Testando atualiza√ß√£o de cliente...');
    const dadosAtualizacao = {
      telefone: '(11) 88888-1234',
      observacoes: 'Cliente atualizado via API'
    };

    const clienteAtualizado = await axios.put(`${API_URL}/clientes/${clienteId}`, dadosAtualizacao);
    console.log('‚úÖ Cliente atualizado:', clienteAtualizado.data.cliente.telefone);

    // 6. Testar busca com filtros
    console.log('\n6. üéØ Testando busca com filtros...');
    const buscaFiltrada = await axios.get(`${API_URL}/clientes?search=Maria&status=ativo`);
    console.log('‚úÖ Busca filtrada:', buscaFiltrada.data.clientes.length, 'resultados');

    // 7. Testar estat√≠sticas
    console.log('\n7. üìä Testando estat√≠sticas...');
    const stats = await axios.get(`${API_URL}/clientes/stats/overview`);
    console.log('‚úÖ Estat√≠sticas obtidas:');
    console.log('  - Total:', stats.data.total);
    console.log('  - Ativos:', stats.data.ativos);
    console.log('  - VIP:', stats.data.vip);

    // 8. Testar exclus√£o (soft delete)
    console.log('\n8. üóëÔ∏è Testando exclus√£o de cliente...');
    await axios.delete(`${API_URL}/clientes/${clienteId}`);
    console.log('‚úÖ Cliente exclu√≠do com sucesso');

    // 9. Verificar se cliente foi realmente exclu√≠do
    console.log('\n9. ‚úÖ Verificando exclus√£o...');
    try {
      await axios.get(`${API_URL}/clientes/${clienteId}`);
      console.log('‚ùå Erro: Cliente deveria estar exclu√≠do');
    } catch (error) {
      if (error.response?.status === 404) {
        console.log('‚úÖ Confirmado: Cliente foi exclu√≠do corretamente');
      } else {
        console.log('‚ùå Erro inesperado:', error.message);
      }
    }

    console.log('\nüéâ Todos os testes da API passaram com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro no teste da API:', error.response?.data || error.message);
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', error.response.data);
    }
  }
}

// Aguardar um pouco para o servidor iniciar
setTimeout(() => {
  testClientesAPI();
}, 3000);

console.log('‚è≥ Aguardando servidor iniciar...'); 