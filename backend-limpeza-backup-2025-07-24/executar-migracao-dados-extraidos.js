/**
 * EXECUTAR MIGRA√á√ÉO - ADICIONAR DADOS_EXTRAIDOS
 * 
 * Este script executa a migra√ß√£o para adicionar a coluna dados_extraidos
 * na tabela orcamentos, que √© necess√°ria para o funcionamento correto
 * do sistema de gera√ß√£o de or√ßamentos.
 */

const fs = require('fs');
const path = require('path');

// Carregar vari√°veis de ambiente
require('dotenv').config();

const { Client } = require('pg');

async function executarMigracao() {
  const client = new Client({
    connectionString: "postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres"
  });

  try {
    console.log('üöÄ EXECUTANDO MIGRA√á√ÉO - DADOS_EXTRAIDOS');
    console.log('='.repeat(50));

    // Conectar ao banco
    await client.connect();
    console.log('‚úÖ Conectado ao banco de dados');

    // Ler arquivo de migra√ß√£o
    const migrationPath = path.join(__dirname, 'migrations', '004-adicionar-dados-extraidos-orcamentos.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');

    console.log('\nüìÑ Executando migra√ß√£o...');
    console.log('Arquivo:', migrationPath);

    // Executar migra√ß√£o
    const result = await client.query(migrationSQL);
    
    console.log('‚úÖ Migra√ß√£o executada com sucesso!');
    
    // Se h√° resultado da verifica√ß√£o, mostrar
    if (result.rows && result.rows.length > 0) {
      console.log('\nüìä Verifica√ß√£o da coluna:');
      result.rows.forEach(row => {
        console.log(`   - ${row.column_name} (${row.data_type}) ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
      });
    }

    // Testar inser√ß√£o de um or√ßamento
    console.log('\nüß™ Testando inser√ß√£o de or√ßamento...');
    
    const codigoTeste = `ORC-TESTE-${Date.now()}`;
    
    const insertResult = await client.query(`
      INSERT INTO orcamentos (
        codigo, nome, descricao, status, 
        area_construida, valor_total, valor_por_m2,
        tipologia, padrao, complexidade,
        disciplinas, composicao_financeira, cronograma, proposta,
        briefing_id, escritorio_id, responsavel_id,
        dados_extraidos
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
      ) RETURNING id, codigo
    `, [
      codigoTeste,
      'Or√ßamento Teste Migra√ß√£o',
      'Teste para verificar se a migra√ß√£o funcionou',
      'RASCUNHO',
      200,
      50000,
      250,
      'RESIDENCIAL',
      'MEDIO',
      'MEDIA',
      JSON.stringify([{nome: 'Arquitetura', valor: 50000}]),
      JSON.stringify({custoTecnico: 40000, lucro: 10000}),
      JSON.stringify({prazoTotal: 12}),
      JSON.stringify({escopo: 'Projeto completo'}),
      '8320013b-8caf-405e-aefc-401e29b61ef8', // ID de um briefing existente
      'escritorio_teste',
      1,
      JSON.stringify({areaConstruida: 200, tipologia: 'RESIDENCIAL'})
    ]);
    
    console.log('‚úÖ Or√ßamento de teste inserido!');
    console.log('   ID:', insertResult.rows[0].id);
    console.log('   C√≥digo:', insertResult.rows[0].codigo);

    // Verificar se foi salvo
    const selectResult = await client.query(`
      SELECT id, codigo, nome, valor_total, dados_extraidos
      FROM orcamentos 
      WHERE codigo = $1
    `, [codigoTeste]);
    
    if (selectResult.rows.length > 0) {
      const orcamento = selectResult.rows[0];
      console.log('‚úÖ Or√ßamento confirmado no banco!');
      console.log('   Nome:', orcamento.nome);
      console.log('   Valor:', orcamento.valor_total);
      console.log('   Dados extra√≠dos:', orcamento.dados_extraidos ? 'Presente ‚úÖ' : 'Ausente ‚ùå');
    }

    console.log('\n' + '='.repeat(50));
    console.log('üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('');
    console.log('‚úÖ A coluna dados_extraidos foi adicionada √† tabela orcamentos');
    console.log('‚úÖ O sistema de gera√ß√£o de or√ßamentos agora deve funcionar');
    console.log('‚úÖ Teste de inser√ß√£o passou com sucesso');
    console.log('');
    console.log('üîÑ Pr√≥ximos passos:');
    console.log('   1. Testar a gera√ß√£o de or√ßamento via API');
    console.log('   2. Verificar se o redirecionamento funciona');
    console.log('   3. Confirmar que a p√°gina de or√ßamento carrega');

  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
    throw error;
  } finally {
    await client.end();
    console.log('üîå Conex√£o com banco encerrada');
  }
}

// Executar migra√ß√£o
executarMigracao().catch(console.error);