/**
 * EXCLUIR OR√áAMENTOS PROBLEM√ÅTICOS - ARCFLOW
 * 
 * Remove or√ßamentos com valores absurdos para permitir regenera√ß√£o
 * com o novo sistema de precifica√ß√£o realista
 */

const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres.lxatittpiiufvubyggzb:obm101264@aws-0-sa-east-1.pooler.supabase.com:6543/postgres'
});

async function excluirOrcamentosProblematicos() {
  console.log('üóëÔ∏è  EXCLUINDO OR√áAMENTOS PROBLEM√ÅTICOS');
  console.log('='.repeat(60));
  
  try {
    // 1. Identificar or√ßamentos problem√°ticos
    const problematicoResult = await pool.query(`
      SELECT 
        o.id,
        o.valor_total,
        o.valor_por_m2,
        o.area_construida,
        b.nome_projeto,
        b.area
      FROM orcamentos o
      LEFT JOIN briefings b ON o.briefing_id = b.id
      WHERE 
        o.valor_por_m2 > 500 OR 
        (o.valor_total > 200000 AND o.area_construida < 500)
      ORDER BY o.valor_por_m2 DESC
    `);
    
    console.log(`üîç Encontrados ${problematicoResult.rows.length} or√ßamentos problem√°ticos:`);
    
    if (problematicoResult.rows.length === 0) {
      console.log('‚úÖ Nenhum or√ßamento problem√°tico encontrado!');
      return;
    }
    
    // 2. Mostrar or√ßamentos que ser√£o exclu√≠dos
    problematicoResult.rows.forEach((row, index) => {
      const valorTotal = parseFloat(row.valor_total || 0);
      const valorPorM2 = parseFloat(row.valor_por_m2 || 0);
      const area = parseFloat(row.area_construida || row.area || 0);
      
      console.log(`\\n${index + 1}. ${row.nome_projeto || 'Sem nome'} (ID: ${row.id})`);
      console.log(`   Valor Total: R$ ${valorTotal.toLocaleString('pt-BR')}`);
      console.log(`   Valor/m¬≤: R$ ${valorPorM2.toFixed(2)} ‚ùå PROBLEM√ÅTICO`);
      console.log(`   √Årea: ${area}m¬≤`);
    });
    
    // 3. Confirmar exclus√£o
    console.log('\\n‚ö†Ô∏è  ATEN√á√ÉO: Estes or√ßamentos ser√£o EXCLU√çDOS permanentemente!');
    console.log('   Ap√≥s a exclus√£o, voc√™ poder√° gerar novos or√ßamentos com valores realistas.');
    
    // 4. Executar exclus√£o
    console.log('\\nüóëÔ∏è  Executando exclus√£o...');
    
    const idsParaExcluir = problematicoResult.rows.map(row => row.id);
    
    const deleteResult = await pool.query(`
      DELETE FROM orcamentos 
      WHERE id = ANY($1)
    `, [idsParaExcluir]);
    
    console.log(`‚úÖ ${deleteResult.rowCount} or√ßamentos problem√°ticos exclu√≠dos com sucesso!`);
    
    // 5. Verificar or√ßamentos restantes
    const restantesResult = await pool.query(`
      SELECT 
        COUNT(*) as total,
        AVG(valor_por_m2) as media_valor_m2,
        MIN(valor_por_m2) as min_valor_m2,
        MAX(valor_por_m2) as max_valor_m2
      FROM orcamentos 
      WHERE valor_por_m2 > 0
    `);
    
    if (restantesResult.rows[0].total > 0) {
      const stats = restantesResult.rows[0];
      console.log('\\nüìä OR√áAMENTOS RESTANTES:');
      console.log(`   Total: ${stats.total}`);
      console.log(`   Valor/m¬≤ m√©dio: R$ ${parseFloat(stats.media_valor_m2).toFixed(2)}`);
      console.log(`   Faixa: R$ ${parseFloat(stats.min_valor_m2).toFixed(2)} - R$ ${parseFloat(stats.max_valor_m2).toFixed(2)}`);
      
      if (parseFloat(stats.max_valor_m2) <= 500) {
        console.log('   ‚úÖ Todos os or√ßamentos restantes t√™m valores realistas!');
      }
    } else {
      console.log('\\nüìä Nenhum or√ßamento restante no banco.');
    }
    
    console.log('\\nüéâ LIMPEZA CONCLU√çDA!');
    console.log('\\nüìã PR√ìXIMOS PASSOS:');
    console.log('   1. Acesse o sistema ArcFlow');
    console.log('   2. V√° para os briefings que tiveram or√ßamentos exclu√≠dos');
    console.log('   3. Clique em "Gerar Or√ßamento" novamente');
    console.log('   4. Os novos or√ßamentos usar√£o valores realistas (R$ 80-400/m¬≤)');
    
    // 6. Listar briefings que precisam de novos or√ßamentos
    const briefingsSemOrcamento = await pool.query(`
      SELECT b.id, b.nome_projeto, b.tipologia, b.area
      FROM briefings b
      LEFT JOIN orcamentos o ON b.id = o.briefing_id
      WHERE o.id IS NULL
      AND b.nome_projeto IS NOT NULL
      ORDER BY b.created_at DESC
      LIMIT 10
    `);
    
    if (briefingsSemOrcamento.rows.length > 0) {
      console.log('\\nüìã BRIEFINGS QUE PRECISAM DE NOVOS OR√áAMENTOS:');
      briefingsSemOrcamento.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.nome_projeto} (${row.tipologia}, ${row.area}m¬≤)`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await pool.end();
  }
}

// Executar exclus√£o
if (require.main === module) {
  excluirOrcamentosProblematicos();
}

module.exports = { excluirOrcamentosProblematicos };