const { Pool } = require('pg');
const Redis = require('ioredis');

// Configura√ß√µes
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'arcflow',
  password: process.env.DB_PASSWORD || 'sua_senha',
  port: process.env.DB_PORT || 5432,
});

const redis = new Redis({
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  password: process.env.REDIS_PASSWORD,
  retryDelayOnFailover: 100,
  maxRetriesPerRequest: 3
});

async function testarSistemaTriggers() {
  console.log('üß™ Iniciando teste do sistema de triggers autom√°ticos...\n');
  
  try {
    // 1. Testar conex√£o com banco de dados
    console.log('1Ô∏è‚É£ Testando conex√£o com PostgreSQL...');
    const client = await pool.connect();
    const dbResult = await client.query('SELECT NOW() as timestamp');
    console.log(`‚úÖ PostgreSQL conectado: ${dbResult.rows[0].timestamp}`);
    client.release();
    
    // 2. Testar conex√£o com Redis
    console.log('\n2Ô∏è‚É£ Testando conex√£o com Redis...');
    await redis.set('test_key', 'test_value', 'EX', 10);
    const redisValue = await redis.get('test_key');
    console.log(`‚úÖ Redis conectado: ${redisValue === 'test_value' ? 'OK' : 'FALHOU'}`);
    
    // 3. Verificar estruturas do banco
    console.log('\n3Ô∏è‚É£ Verificando estruturas do banco...');
    
    const estruturas = [
      { nome: 'Tabela trigger_logs', query: "SELECT COUNT(*) FROM trigger_logs" },
      { nome: 'Tabela notifications', query: "SELECT COUNT(*) FROM notifications" },
      { nome: 'Coluna briefings.orcamento_gerado', query: "SELECT COUNT(*) FROM information_schema.columns WHERE table_name = 'briefings' AND column_name = 'orcamento_gerado'" },
      { nome: 'Tabela configuracoes_orcamento', query: "SELECT COUNT(*) FROM configuracoes_orcamento" }
    ];
    
    for (const estrutura of estruturas) {
      try {
        const result = await pool.query(estrutura.query);
        const count = parseInt(result.rows[0].count);
        console.log(`‚úÖ ${estrutura.nome}: ${count >= 0 ? 'OK' : 'FALHOU'}`);
      } catch (error) {
        console.log(`‚ùå ${estrutura.nome}: ERRO - ${error.message}`);
      }
    }
    
    // 4. Testar servi√ßos (simula√ß√£o)
    console.log('\n4Ô∏è‚É£ Testando servi√ßos...');
    
    // Simular adi√ß√£o de job √† fila
    const testJob = {
      id: `test-${Date.now()}`,
      briefingId: 'test-briefing-id',
      userId: 'test-user-id',
      escritorioId: 'test-escritorio-id',
      priority: 'normal',
      createdAt: new Date().toISOString(),
      metadata: { test: true }
    };
    
    await redis.lpush('budget_generation_queue:normal', JSON.stringify(testJob));
    console.log('‚úÖ Job de teste adicionado √† fila');
    
    // Verificar se job est√° na fila
    const queueLength = await redis.llen('budget_generation_queue:normal');
    console.log(`‚úÖ Fila de or√ßamentos: ${queueLength} jobs`);
    
    // Remover job de teste
    await redis.rpop('budget_generation_queue:normal');
    console.log('‚úÖ Job de teste removido da fila');
    
    // 5. Testar logs de trigger
    console.log('\n5Ô∏è‚É£ Testando sistema de logs...');
    
    const testLog = await pool.query(`
      INSERT INTO trigger_logs (type, action, metadata) 
      VALUES ('test', 'system_test', '{"test": true}') 
      RETURNING id
    `);
    
    console.log(`‚úÖ Log de teste criado: ${testLog.rows[0].id}`);
    
    // Limpar log de teste
    await pool.query('DELETE FROM trigger_logs WHERE type = $1', ['test']);
    console.log('‚úÖ Log de teste removido');
    
    // 6. Testar notifica√ß√µes
    console.log('\n6Ô∏è‚É£ Testando sistema de notifica√ß√µes...');
    
    // Buscar um usu√°rio para teste
    const userResult = await pool.query('SELECT id FROM users LIMIT 1');
    
    if (userResult.rows.length > 0) {
      const userId = userResult.rows[0].id;
      
      const testNotification = await pool.query(`
        INSERT INTO notifications (user_id, type, title, message) 
        VALUES ($1, 'test', 'Teste do Sistema', 'Esta √© uma notifica√ß√£o de teste') 
        RETURNING id
      `, [userId]);
      
      console.log(`‚úÖ Notifica√ß√£o de teste criada: ${testNotification.rows[0].id}`);
      
      // Limpar notifica√ß√£o de teste
      await pool.query('DELETE FROM notifications WHERE type = $1', ['test']);
      console.log('‚úÖ Notifica√ß√£o de teste removida');
    } else {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado para teste de notifica√ß√£o');
    }
    
    // 7. Verificar configura√ß√µes de or√ßamento
    console.log('\n7Ô∏è‚É£ Verificando configura√ß√µes de or√ßamento...');
    
    const configResult = await pool.query(`
      SELECT escritorio_id, tabela_precos, multiplicadores_tipologia 
      FROM configuracoes_orcamento 
      LIMIT 1
    `);
    
    if (configResult.rows.length > 0) {
      const config = configResult.rows[0];
      console.log('‚úÖ Configura√ß√£o de or√ßamento encontrada:');
      console.log(`   - Escrit√≥rio: ${config.escritorio_id}`);
      console.log(`   - Tabela de pre√ßos: ${Object.keys(config.tabela_precos).length} disciplinas`);
      console.log(`   - Multiplicadores: ${Object.keys(config.multiplicadores_tipologia).length} tipologias`);
    } else {
      console.log('‚ö†Ô∏è Nenhuma configura√ß√£o de or√ßamento encontrada');
    }
    
    // 8. Testar estat√≠sticas da fila
    console.log('\n8Ô∏è‚É£ Testando estat√≠sticas da fila...');
    
    const queueStats = {
      urgent: await redis.llen('budget_generation_queue:urgent'),
      high: await redis.llen('budget_generation_queue:high'),
      normal: await redis.llen('budget_generation_queue:normal'),
      low: await redis.llen('budget_generation_queue:low')
    };
    
    console.log('‚úÖ Estat√≠sticas da fila:');
    console.log(`   - Urgente: ${queueStats.urgent}`);
    console.log(`   - Alta: ${queueStats.high}`);
    console.log(`   - Normal: ${queueStats.normal}`);
    console.log(`   - Baixa: ${queueStats.low}`);
    
    console.log('\nüéâ Todos os testes passaram! Sistema de triggers est√° funcionando.');
    
    // Instru√ß√µes finais
    console.log('\nüìã Para usar o sistema:');
    console.log('1. Inicie os workers: node -e "require(\'./src/workers\').workerManager.start()"');
    console.log('2. Configure o middleware nos endpoints de briefing');
    console.log('3. Teste com um briefing real alterando status para CONCLUIDO');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    throw error;
  }
}

async function main() {
  try {
    await testarSistemaTriggers();
  } catch (error) {
    console.error('üí• Falha nos testes:', error.message);
    process.exit(1);
  } finally {
    await redis.disconnect();
    await pool.end();
  }
}

// Executa se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { testarSistemaTriggers };