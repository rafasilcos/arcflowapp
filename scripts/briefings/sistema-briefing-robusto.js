/**
 * SISTEMA ROBUSTO PARA PREENCHIMENTO DE BRIEFINGS - ARCFLOW
 * 
 * Sistema com verifica√ß√µes robustas e aguarda carregamento completo
 * 
 * Vers√£o: 1.2 - Robusta
 * Data: 24/07/2025
 */

const puppeteer = require('puppeteer');

class SistemaBriefingRobusto {
  constructor() {
    this.browser = null;
    this.page = null;
  }

  async inicializar() {
    console.log('üöÄ Inicializando sistema robusto para ArcFlow');
    
    this.browser = await puppeteer.launch({
      headless: false,
      defaultViewport: { width: 1366, height: 768 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    this.page = await this.browser.newPage();
    await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
    
    console.log('‚úÖ Sistema inicializado');
  }

  async fazerLogin(email, senha) {
    console.log('üîê Fazendo login...');
    
    await this.page.goto('http://localhost:3000/auth/login', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    await this.page.waitForSelector('input[type="email"]', { timeout: 10000 });
    await this.page.type('input[type="email"]', email, { delay: 100 });
    await this.page.type('input[type="password"]', senha, { delay: 100 });
    await this.page.click('button[type="submit"]');
    
    // Aguardar redirecionamento para dashboard
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const urlAtual = this.page.url();
    console.log(`üìç URL ap√≥s login: ${urlAtual}`);
    
    if (urlAtual.includes('/dashboard')) {
      console.log('‚úÖ Login realizado com sucesso');
    } else if (urlAtual.includes('/auth/login')) {
      throw new Error('Login falhou - ainda na p√°gina de login');
    } else {
      console.log('‚ö†Ô∏è Redirecionamento inesperado, mas continuando...');
    }
  }

  async aguardarCarregamentoCompleto() {
    console.log('‚è≥ Aguardando carregamento completo da p√°gina...');
    
    // Aguardar m√∫ltiplas condi√ß√µes
    await Promise.all([
      this.page.waitForLoadState?.('networkidle') || Promise.resolve(),
      new Promise(resolve => setTimeout(resolve, 5000)), // 5 segundos fixos
      this.page.waitForFunction(() => document.readyState === 'complete'),
    ]);
    
    console.log('‚úÖ P√°gina carregada completamente');
  }

  async navegarParaBriefing() {
    console.log('üß≠ Navegando para p√°gina de briefing...');
    
    await this.page.goto('http://localhost:3000/briefing/novo', { 
      waitUntil: 'networkidle0',
      timeout: 30000 
    });
    
    await this.aguardarCarregamentoCompleto();
    
    // Capturar screenshot para debug
    await this.page.screenshot({ 
      path: `debug-navegacao-${Date.now()}.png`,
      fullPage: true 
    });
    
    // Verificar se estamos na p√°gina correta
    const url = this.page.url();
    console.log(`üìç URL atual: ${url}`);
    
    if (!url.includes('/briefing/novo')) {
      throw new Error(`URL incorreta: ${url}. Esperado: /briefing/novo`);
    }
    
    // Aguardar e verificar elementos
    console.log('üîç Verificando elementos na p√°gina...');
    
    const elementos = await this.page.evaluate(() => {
      const inputs = Array.from(document.querySelectorAll('input'));
      const textareas = Array.from(document.querySelectorAll('textarea'));
      const buttons = Array.from(document.querySelectorAll('button'));
      
      return {
        inputs: inputs.length,
        textareas: textareas.length,
        buttons: buttons.length,
        inputsInfo: inputs.slice(0, 5).map(input => ({
          type: input.type,
          placeholder: input.placeholder,
          visible: input.offsetParent !== null
        }))
      };
    });
    
    console.log(`üìä Elementos encontrados: ${elementos.inputs} inputs, ${elementos.textareas} textareas, ${elementos.buttons} buttons`);
    elementos.inputsInfo.forEach((input, i) => {
      console.log(`   Input ${i+1}: ${input.type} - "${input.placeholder}" - Vis√≠vel: ${input.visible}`);
    });
    
    // Tentar diferentes estrat√©gias para encontrar campos
    const estrategias = [
      () => this.page.waitForSelector('input[placeholder*="Nome"]', { timeout: 5000 }),
      () => this.page.waitForSelector('input[placeholder*="Projeto"]', { timeout: 5000 }),
      () => this.page.waitForSelector('input[type="text"]', { timeout: 5000 }),
      () => this.page.waitForSelector('input', { timeout: 5000 })
    ];
    
    let campoEncontrado = false;
    for (let i = 0; i < estrategias.length; i++) {
      try {
        console.log(`üéØ Tentando estrat√©gia ${i + 1}...`);
        await estrategias[i]();
        console.log(`‚úÖ Estrat√©gia ${i + 1} funcionou!`);
        campoEncontrado = true;
        break;
      } catch (e) {
        console.log(`‚ùå Estrat√©gia ${i + 1} falhou: ${e.message}`);
      }
    }
    
    if (!campoEncontrado) {
      // √öltima tentativa: aguardar mais tempo
      console.log('‚è≥ √öltima tentativa: aguardando 10 segundos adicionais...');
      await new Promise(resolve => setTimeout(resolve, 10000));
      
      try {
        await this.page.waitForSelector('input', { timeout: 5000 });
        console.log('‚úÖ Campo encontrado ap√≥s aguardar mais tempo');
      } catch (e) {
        throw new Error('Nenhum campo de entrada encontrado ap√≥s todas as tentativas');
      }
    }
    
    console.log('‚úÖ P√°gina de briefing carregada e campos encontrados');
  }

  async preencherCampoSeguro(seletor, valor, nome) {
    console.log(`üìù Preenchendo ${nome}...`);
    
    try {
      const campo = await this.page.$(seletor);
      if (campo) {
        // Verificar se o campo est√° vis√≠vel
        const visivel = await campo.evaluate(el => el.offsetParent !== null);
        if (!visivel) {
          console.log(`‚ö†Ô∏è Campo ${nome} n√£o est√° vis√≠vel`);
          return false;
        }
        
        // Limpar e preencher
        await campo.click();
        await campo.evaluate(el => el.value = '');
        await campo.type(valor, { delay: 100 });
        
        // Verificar se foi preenchido
        const valorAtual = await campo.evaluate(el => el.value);
        if (valorAtual === valor) {
          console.log(`‚úÖ ${nome} preenchido com sucesso`);
          return true;
        } else {
          console.log(`‚ö†Ô∏è ${nome} n√£o foi preenchido corretamente. Esperado: "${valor}", Atual: "${valorAtual}"`);
          return false;
        }
      } else {
        console.log(`‚ö†Ô∏è Campo ${nome} n√£o encontrado`);
        return false;
      }
    } catch (error) {
      console.log(`‚ùå Erro ao preencher ${nome}: ${error.message}`);
      return false;
    }
  }

  async preencherBriefing(dados) {
    console.log('üìù Iniciando preenchimento do briefing...');
    
    const resultados = {};
    
    // 1. Nome do Projeto
    resultados.nome = await this.preencherCampoSeguro(
      'input[placeholder="Nome do Projeto *"]',
      dados.nomeProjeto || 'TESTE AUTOM√ÅTICO - Resid√™ncia Silva',
      'Nome do Projeto'
    );
    
    // 2. Prazo
    resultados.prazo = await this.preencherCampoSeguro(
      'input[placeholder="Prazo estimado (ex: 3 meses)"]',
      dados.prazo || '6 meses',
      'Prazo'
    );
    
    // 3. Or√ßamento
    resultados.orcamento = await this.preencherCampoSeguro(
      'input[placeholder="Or√ßamento previsto (ex: R$ 50.000)"]',
      dados.orcamento || 'R$ 500.000',
      'Or√ßamento'
    );
    
    // 4. Preencher e Selecionar Cliente
    console.log('üë§ Preenchendo e selecionando cliente...');
    try {
      const campoCliente = await this.page.$('input[placeholder="Digite o nome ou email do cliente..."]');
      if (campoCliente) {
        // Limpar campo e digitar "Ana" para buscar
        await campoCliente.click();
        await campoCliente.evaluate(el => el.value = '');
        await campoCliente.type('Ana', { delay: 100 });
        
        // Aguardar autocomplete aparecer
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Procurar e clicar na op√ß√£o da Ana
        const clienteSelecionada = await this.page.evaluate(() => {
          // Procurar por elementos que podem ser op√ß√µes do autocomplete
          const seletores = [
            '[role="option"]',
            '.autocomplete-option',
            '.dropdown-item',
            '.select-option',
            'li',
            '[class*="option"]',
            '[class*="item"]'
          ];
          
          for (const seletor of seletores) {
            const opcoes = Array.from(document.querySelectorAll(seletor));
            const opcaoAna = opcoes.find(opcao => 
              opcao.textContent?.toLowerCase().includes('ana') && 
              opcao.offsetParent !== null
            );
            
            if (opcaoAna) {
              opcaoAna.click();
              return opcaoAna.textContent?.trim();
            }
          }
          
          return null;
        });
        
        if (clienteSelecionada) {
          console.log(`‚úÖ Cliente selecionada: ${clienteSelecionada}`);
          resultados.cliente = true;
        } else {
          console.log('‚ö†Ô∏è Cliente Ana n√£o encontrada no autocomplete');
          resultados.cliente = false;
        }
      } else {
        console.log('‚ö†Ô∏è Campo cliente n√£o encontrado');
        resultados.cliente = false;
      }
    } catch (error) {
      console.log(`‚ùå Erro ao selecionar cliente: ${error.message}`);
      resultados.cliente = false;
    }
    
    // 5. Descri√ß√£o
    resultados.descricao = await this.preencherCampoSeguro(
      'textarea[placeholder="Descri√ß√£o detalhada do projeto (opcional)"]',
      dados.descricao || 'Briefing preenchido automaticamente pelo sistema ArcFlow.',
      'Descri√ß√£o'
    );
    
    // 6. Respons√°vel (dropdown)
    console.log('üë®‚Äçüíº Selecionando respons√°vel...');
    try {
      const botaoResponsavel = await this.page.$('button[role="combobox"]');
      if (botaoResponsavel) {
        await botaoResponsavel.click();
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const opcoes = await this.page.$$('[role="option"]');
        if (opcoes.length > 0) {
          await opcoes[0].click();
          console.log('‚úÖ Respons√°vel selecionado');
          resultados.responsavel = true;
        } else {
          console.log('‚ö†Ô∏è Nenhuma op√ß√£o de respons√°vel encontrada');
          resultados.responsavel = false;
        }
      } else {
        console.log('‚ö†Ô∏è Dropdown respons√°vel n√£o encontrado');
        resultados.responsavel = false;
      }
    } catch (e) {
      console.log('‚ùå Erro ao selecionar respons√°vel:', e.message);
      resultados.responsavel = false;
    }
    
    // Resumo dos resultados
    console.log('\nüìä RESUMO DO PREENCHIMENTO:');
    Object.entries(resultados).forEach(([campo, sucesso]) => {
      console.log(`   ${campo}: ${sucesso ? '‚úÖ' : '‚ùå'}`);
    });
    
    const sucessos = Object.values(resultados).filter(Boolean).length;
    const total = Object.keys(resultados).length;
    console.log(`\nüéØ Taxa de sucesso: ${sucessos}/${total} (${Math.round(sucessos/total*100)}%)`);
    
    return resultados;
  }

  async tentarAvancar() {
    console.log('‚û°Ô∏è Tentando avan√ßar para pr√≥xima etapa...');
    
    try {
      const botaoEncontrado = await this.page.evaluate(() => {
        const botoes = Array.from(document.querySelectorAll('button'));
        const botao = botoes.find(btn => btn.textContent?.trim() === 'Pr√≥xima Etapa');
        if (botao && !botao.disabled) {
          botao.click();
          return true;
        }
        return false;
      });
      
      if (botaoEncontrado) {
        console.log('‚úÖ Clicou em "Pr√≥xima Etapa"');
        await new Promise(resolve => setTimeout(resolve, 3000));
        return true;
      } else {
        console.log('‚ö†Ô∏è Bot√£o "Pr√≥xima Etapa" n√£o encontrado ou desabilitado');
        return false;
      }
    } catch (error) {
      console.log('‚ùå Erro ao tentar avan√ßar:', error.message);
      return false;
    }
  }

  async selecionarTipoBriefing() {
    console.log('üè† ETAPA 2: Selecionando tipo de briefing (Arquitetura ‚Üí Residencial ‚Üí Unifamiliar)...');
    
    // Aguardar p√°gina carregar
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Capturar screenshot da p√°gina de sele√ß√£o
    await this.page.screenshot({ 
      path: `selecao-briefing-${Date.now()}.png`,
      fullPage: true 
    });
    
    try {
      // PASSO 1: Clicar em ARQUITETURA
      console.log('üèóÔ∏è Passo 1: Clicando em Arquitetura...');
      const arquiteturaClicada = await this.page.evaluate(() => {
        const elementos = Array.from(document.querySelectorAll('button, .card, [class*="card"], div, span'));
        const arquitetura = elementos.find(el => 
          el.textContent?.toLowerCase().includes('arquitetura') && 
          el.offsetParent !== null
        );
        
        if (arquitetura) {
          arquitetura.click();
          return arquitetura.textContent?.trim();
        }
        return null;
      });
      
      if (arquiteturaClicada) {
        console.log(`‚úÖ Arquitetura selecionada: ${arquiteturaClicada}`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        console.log('‚ö†Ô∏è Arquitetura n√£o encontrada');
      }
      
      // PASSO 2: Clicar em RESIDENCIAL
      console.log('üè† Passo 2: Clicando em Residencial...');
      const residencialClicada = await this.page.evaluate(() => {
        const elementos = Array.from(document.querySelectorAll('button, .card, [class*="card"], div, span'));
        const residencial = elementos.find(el => 
          el.textContent?.toLowerCase().includes('residencial') && 
          el.offsetParent !== null
        );
        
        if (residencial) {
          residencial.click();
          return residencial.textContent?.trim();
        }
        return null;
      });
      
      if (residencialClicada) {
        console.log(`‚úÖ Residencial selecionada: ${residencialClicada}`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        console.log('‚ö†Ô∏è Residencial n√£o encontrada');
      }
      
      // PASSO 3: Clicar em UNIFAMILIAR
      console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Passo 3: Clicando em Unifamiliar...');
      const unifamiliarClicada = await this.page.evaluate(() => {
        const elementos = Array.from(document.querySelectorAll('button, .card, [class*="card"], div, span'));
        const unifamiliar = elementos.find(el => 
          el.textContent?.toLowerCase().includes('unifamiliar') && 
          el.offsetParent !== null
        );
        
        if (unifamiliar) {
          unifamiliar.click();
          return unifamiliar.textContent?.trim();
        }
        return null;
      });
      
      if (unifamiliarClicada) {
        console.log(`‚úÖ Unifamiliar selecionada: ${unifamiliarClicada}`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      } else {
        console.log('‚ö†Ô∏è Unifamiliar n√£o encontrada');
      }
      
      // PASSO 4: Clicar em GERAR BRIEFING
      console.log('‚ö° Passo 4: Clicando em Gerar Briefing...');
      const gerarBriefingClicado = await this.page.evaluate(() => {
        const botoes = Array.from(document.querySelectorAll('button'));
        const gerarBriefing = botoes.find(btn => 
          btn.textContent?.toLowerCase().includes('gerar briefing') && 
          !btn.disabled
        );
        
        if (gerarBriefing) {
          gerarBriefing.click();
          return gerarBriefing.textContent?.trim();
        }
        return null;
      });
      
      if (gerarBriefingClicado) {
        console.log(`‚úÖ Gerar Briefing clicado: ${gerarBriefingClicado}`);
        await new Promise(resolve => setTimeout(resolve, 3000));
        return 'Arquitetura ‚Üí Residencial ‚Üí Unifamiliar';
      } else {
        console.log('‚ö†Ô∏è Bot√£o Gerar Briefing n√£o encontrado');
        return null;
      }
      
    } catch (error) {
      console.log(`‚ùå Erro na sele√ß√£o de tipologia: ${error.message}`);
      return null;
    }
  }

  async preencherPerguntasBriefing() {
    console.log('üìã ETAPA 3: Preenchendo perguntas do briefing...');
    
    let perguntasRespondidas = 0;
    let etapaAtual = 1;
    let continuarPreenchimento = true;
    
    while (continuarPreenchimento) {
      console.log(`\nüîÑ Processando etapa ${etapaAtual} das perguntas...`);
      
      // Aguardar p√°gina carregar
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Capturar screenshot da etapa atual
      await this.page.screenshot({ 
        path: `perguntas-etapa-${etapaAtual}-${Date.now()}.png`,
        fullPage: true 
      });
      
      // Verificar URL atual
      const urlAtual = this.page.url();
      console.log(`üìç URL atual: ${urlAtual}`);
      
      // Analisar perguntas na p√°gina
      const perguntas = await this.page.evaluate(() => {
        const elementos = [];
        
        // Procurar diferentes tipos de campos de pergunta
        const seletores = [
          'input[type="text"]:not([placeholder*="Buscar"]):not([placeholder*="buscar"])',
          'input[type="number"]',
          'textarea',
          'select',
          'input[type="radio"]',
          'input[type="checkbox"]',
          'button[role="combobox"]'
        ];
        
        seletores.forEach(seletor => {
          const campos = Array.from(document.querySelectorAll(seletor));
          campos.forEach((campo, index) => {
            if (campo.offsetParent !== null) { // Apenas elementos vis√≠veis
              elementos.push({
                tipo: campo.type || campo.tagName.toLowerCase(),
                seletor: `${seletor}:nth-of-type(${index + 1})`,
                placeholder: campo.placeholder || '',
                name: campo.name || '',
                id: campo.id || '',
                text: campo.textContent?.trim() || ''
              });
            }
          });
        });
        
        return elementos;
      });
      
      console.log(`üìù Encontradas ${perguntas.length} perguntas nesta etapa`);
      
      if (perguntas.length === 0) {
        console.log('‚ö†Ô∏è Nenhuma pergunta encontrada - pode ter chegado ao fim');
        break;
      }
      
      // Responder cada pergunta
      for (let i = 0; i < perguntas.length; i++) {
        const pergunta = perguntas[i];
        const sucesso = await this.responderPergunta(pergunta, i + 1);
        if (sucesso) {
          perguntasRespondidas++;
        }
      }
      
      console.log(`‚úÖ Etapa ${etapaAtual} conclu√≠da - ${perguntas.length} perguntas processadas`);
      
      // Tentar avan√ßar para pr√≥xima etapa ou finalizar
      const proximaEtapa = await this.tentarAvancarOuFinalizar();
      
      if (!proximaEtapa) {
        console.log('üèÅ N√£o conseguiu avan√ßar - processo finalizado');
        continuarPreenchimento = false;
      } else {
        etapaAtual++;
        
        // Verificar se ainda estamos no briefing
        await new Promise(resolve => setTimeout(resolve, 2000));
        const novaUrl = this.page.url();
        if (!novaUrl.includes('/briefing') && !novaUrl.includes('/pergunta')) {
          console.log('üèÅ Saiu do briefing - processo conclu√≠do');
          continuarPreenchimento = false;
        }
      }
      
      // Limite de seguran√ßa
      if (etapaAtual > 15) {
        console.log('‚ö†Ô∏è Limite de etapas atingido');
        continuarPreenchimento = false;
      }
    }
    
    console.log(`\nüéâ BRIEFING COMPLETO!`);
    console.log(`üìä Total de perguntas respondidas: ${perguntasRespondidas}`);
    
    return perguntasRespondidas;
  }

  async responderPergunta(pergunta, numero) {
    console.log(`   ${numero}. Respondendo: ${pergunta.tipo} - "${pergunta.placeholder || pergunta.text}"`);
    
    try {
      const elemento = await this.page.$(pergunta.seletor);
      if (!elemento) {
        console.log(`      ‚ö†Ô∏è Elemento n√£o encontrado`);
        return false;
      }
      
      // Gerar resposta baseada no tipo
      const resposta = this.gerarResposta(pergunta);
      
      switch (pergunta.tipo) {
        case 'text':
        case 'textarea':
          await elemento.click();
          await elemento.evaluate(el => el.value = '');
          await elemento.type(resposta, { delay: 50 });
          break;
          
        case 'number':
          await elemento.click();
          await elemento.evaluate(el => el.value = '');
          await elemento.type(resposta.toString(), { delay: 50 });
          break;
          
        case 'select':
          const opcoes = await elemento.$$('option');
          if (opcoes.length > 1) {
            const opcaoAleatoria = Math.floor(Math.random() * (opcoes.length - 1)) + 1;
            await elemento.select(await opcoes[opcaoAleatoria].evaluate(el => el.value));
          }
          break;
          
        case 'radio':
          await elemento.click();
          break;
          
        case 'checkbox':
          if (Math.random() > 0.3) { // 70% chance de marcar
            await elemento.click();
          }
          break;
          
        case 'button': // combobox
          await elemento.click();
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          const opcoesCombo = await this.page.$$('[role="option"]');
          if (opcoesCombo.length > 0) {
            const opcaoAleatoria = Math.floor(Math.random() * opcoesCombo.length);
            await opcoesCombo[opcaoAleatoria].click();
          }
          break;
      }
      
      console.log(`      ‚úÖ Respondido: "${resposta}"`);
      return true;
      
    } catch (error) {
      console.log(`      ‚ùå Erro: ${error.message}`);
      return false;
    }
  }

  gerarResposta(pergunta) {
    const placeholder = (pergunta.placeholder || pergunta.text || '').toLowerCase();
    
    // Respostas espec√≠ficas baseadas no contexto
    if (placeholder.includes('√°rea') || placeholder.includes('m¬≤')) {
      return Math.floor(Math.random() * 400 + 80).toString(); // 80-480 m¬≤
    }
    
    if (placeholder.includes('altura') || placeholder.includes('p√© direito')) {
      return (Math.random() * 1.5 + 2.7).toFixed(1); // 2.7-4.2m
    }
    
    if (placeholder.includes('quantidade') || placeholder.includes('n√∫mero') || placeholder.includes('qtd')) {
      return Math.floor(Math.random() * 8 + 1).toString(); // 1-8
    }
    
    if (placeholder.includes('or√ßamento') || placeholder.includes('valor') || placeholder.includes('r$')) {
      return `R$ ${(Math.random() * 400000 + 100000).toFixed(0)}`; // R$ 100k-500k
    }
    
    if (pergunta.tipo === 'number') {
      return Math.floor(Math.random() * 50 + 1).toString();
    }
    
    // Respostas textuais contextuais
    const respostas = [
      'Sim, conforme projeto arquitet√¥nico',
      'N√£o se aplica neste caso',
      'A definir com o cliente',
      'Seguir normas t√©cnicas NBR',
      'Padr√£o residencial moderno',
      'Funcional e econ√¥mico',
      'Sustent√°vel e eficiente',
      'Integrado ao entorno',
      'Conforme disponibilidade do terreno',
      'Adequado √†s necessidades familiares'
    ];
    
    return respostas[Math.floor(Math.random() * respostas.length)];
  }

  async tentarAvancarOuFinalizar() {
    console.log('   üîÑ Tentando avan√ßar ou finalizar...');
    
    const acaoEncontrada = await this.page.evaluate(() => {
      const botoes = Array.from(document.querySelectorAll('button'));
      
      // Prioridades de a√ß√£o
      const acoes = [
        'finalizar briefing',
        'gerar or√ßamento',
        'concluir',
        'finalizar',
        'pr√≥xima etapa',
        'pr√≥ximo',
        'continuar',
        'avan√ßar'
      ];
      
      for (const acao of acoes) {
        const botao = botoes.find(btn => 
          btn.textContent?.toLowerCase().includes(acao) && !btn.disabled
        );
        
        if (botao) {
          botao.click();
          return { acao, sucesso: true };
        }
      }
      
      return { acao: null, sucesso: false };
    });
    
    if (acaoEncontrada.sucesso) {
      console.log(`   ‚úÖ A√ß√£o executada: ${acaoEncontrada.acao}`);
      await new Promise(resolve => setTimeout(resolve, 3000));
      return true;
    } else {
      console.log('   ‚ö†Ô∏è Nenhuma a√ß√£o dispon√≠vel');
      return false;
    }
  }

  async aguardarSelecaoManual() {
    console.log('\n‚è∏Ô∏è  PAUSA PARA SELE√á√ÉO MANUAL');
    console.log('=' .repeat(60));
    console.log('üë§ AGORA √â SUA VEZ!');
    console.log('');
    console.log('üìã Por favor, fa√ßa manualmente:');
    console.log('   1. üèóÔ∏è  Clique em "Arquitetura"');
    console.log('   2. üè† Clique em "Residencial"');
    console.log('   3. üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Clique em "Unifamiliar"');
    console.log('   4. ‚ö° Clique em "Gerar Briefing"');
    console.log('');
    console.log('ü§ñ Ap√≥s clicar em "Gerar Briefing", o sistema continuar√° automaticamente');
    console.log('üìã Preenchendo todas as 235 perguntas nas 15 se√ß√µes');
    console.log('');
    console.log('‚è≥ Aguardando voc√™ chegar na p√°gina das perguntas...');
    
    // Aguardar at√© detectar que chegamos na p√°gina de perguntas
    let tentativas = 0;
    const maxTentativas = 120; // 10 minutos
    
    while (tentativas < maxTentativas) {
      try {
        const url = this.page.url();
        
        // Verificar se h√° muitas perguntas na p√°gina (indicativo de briefing gerado)
        const temMuitasPerguntas = await this.page.evaluate(() => {
          const inputs = document.querySelectorAll('input, textarea, select');
          const perguntasReais = Array.from(inputs).filter(el => 
            el.offsetParent !== null && // Vis√≠vel
            !el.placeholder?.toLowerCase().includes('buscar') &&
            !el.placeholder?.toLowerCase().includes('search') &&
            !el.placeholder?.toLowerCase().includes('nome do projeto') &&
            !el.placeholder?.toLowerCase().includes('prazo') &&
            !el.placeholder?.toLowerCase().includes('or√ßamento')
          );
          return perguntasReais.length > 10; // Se tem mais de 10 campos espec√≠ficos
        });
        
        if (temMuitasPerguntas) {
          console.log('\n‚úÖ P√ÅGINA DE PERGUNTAS DETECTADA!');
          console.log('ü§ñ Iniciando preenchimento autom√°tico das 235 perguntas...');
          return true;
        }
        
        // Mostrar progresso a cada 10 tentativas
        if (tentativas % 10 === 0) {
          console.log(`‚è≥ Aguardando... (${tentativas * 5}s) - URL: ${url}`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 5000));
        tentativas++;
        
      } catch (error) {
        console.log(`‚ö†Ô∏è Erro ao verificar: ${error.message}`);
        tentativas++;
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    throw new Error('Timeout: N√£o detectou a p√°gina de perguntas em 10 minutos');
  }

  async executarFluxoCompleto(dados) {
    console.log('üéØ Executando fluxo H√çBRIDO (autom√°tico + manual)');
    
    try {
      // ETAPA 1: Login (autom√°tico)
      await this.fazerLogin(dados.email, dados.senha);
      
      // ETAPA 2: Navegar para briefing (autom√°tico)
      await this.navegarParaBriefing();
      
      // ETAPA 3: Preencher dados b√°sicos (autom√°tico)
      const resultados = await this.preencherBriefing(dados);
      
      // ETAPA 4: Avan√ßar para sele√ß√£o de tipo (autom√°tico)
      const avancarSucesso = await this.tentarAvancar();
      if (!avancarSucesso) {
        throw new Error('N√£o conseguiu avan√ßar da primeira etapa');
      }
      
      // ETAPA 5: Aguardar sele√ß√£o manual (manual)
      await this.aguardarSelecaoManual();
      
      // ETAPA 6: Preencher todas as perguntas do briefing (autom√°tico)
      const perguntasRespondidas = await this.preencherPerguntasBriefing();
      
      // ETAPA 7: Screenshot final
      await this.page.screenshot({ 
        path: `briefing-completo-finalizado-${Date.now()}.png`,
        fullPage: true 
      });
      
      console.log('\nüèÜ BRIEFING H√çBRIDO FINALIZADO COM SUCESSO!');
      console.log(`üìä Dados b√°sicos: ${Object.values(resultados).filter(Boolean).length}/${Object.keys(resultados).length} campos`);
      console.log(`üìã Perguntas respondidas: ${perguntasRespondidas}`);
      console.log('üîç Verifique o banco de dados para confirmar salvamento');
      
      // Aguardar para visualiza√ß√£o final
      console.log('‚è≥ Aguardando 15 segundos para visualiza√ß√£o final...');
      await new Promise(resolve => setTimeout(resolve, 15000));
      
      return { 
        preenchimento: resultados, 
        perguntasRespondidas,
        sucesso: true
      };
      
    } catch (error) {
      console.error('‚ùå Erro no fluxo completo:', error);
      
      // Capturar screenshot do erro
      await this.page.screenshot({ 
        path: `erro-briefing-completo-${Date.now()}.png`,
        fullPage: true 
      });
      
      throw error;
    }
  }

  async finalizar() {
    console.log('üîö Finalizando sistema...');
    
    if (this.browser) {
      await this.browser.close();
    }
    
    console.log('‚úÖ Sistema finalizado');
  }
}

// ===== EXECU√á√ÉO =====

async function executarSistemaRobusto() {
  const sistema = new SistemaBriefingRobusto();
  
  const dados = {
    email: 'admin@arcflow.com',
    senha: '123456',
    nomeProjeto: 'TESTE AUTOM√ÅTICO - Resid√™ncia Silva',
    prazo: '6 meses',
    orcamento: 'R$ 500.000',
    clienteNome: 'Ana Paula Silva',
    descricao: 'Briefing preenchido automaticamente pelo sistema ArcFlow. Projeto residencial moderno com foco em funcionalidade e conforto para a fam√≠lia.'
  };
  
  try {
    console.log('üöÄ INICIANDO SISTEMA ROBUSTO PARA ARCFLOW');
    console.log('=' .repeat(60));
    
    await sistema.inicializar();
    const resultado = await sistema.executarFluxoCompleto(dados);
    
    console.log('\nüéâ EXECU√á√ÉO CONCLU√çDA!');
    console.log('üìä Resultados:', JSON.stringify(resultado, null, 2));
    
  } catch (error) {
    console.error('\n‚ùå ERRO:', error.message);
  } finally {
    await sistema.finalizar();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  executarSistemaRobusto();
}

module.exports = { SistemaBriefingRobusto, executarSistemaRobusto };