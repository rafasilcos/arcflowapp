/**
 * üîç TESTE FINAL: OR√áAMENTO 63 COM TODAS AS CORRE√á√ïES
 * 
 * Testar se o or√ßamento 63 carrega sem erros de JSON.parse
 */

const axios = require('axios');

async function testeFinalOrcamento63() {
  console.log('üîç TESTE FINAL - OR√áAMENTO 63 COM CORRE√á√ïES\n');
  
  try {
    // 1. Testar backend direto primeiro
    console.log('1. üîç TESTANDO BACKEND DIRETO...');
    
    const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
      email: 'admin@arcflow.com',
      password: '123456'
    });
    
    const token = loginResponse.data.token;
    
    const backendResponse = await axios.get('http://localhost:3001/api/orcamentos/63', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ BACKEND FUNCIONANDO!');
    console.log('üìä DADOS DO BACKEND:');
    
    const orcamento = backendResponse.data.data;
    console.log(`   - ID: ${orcamento.id}`);
    console.log(`   - C√≥digo: ${orcamento.codigo}`);
    console.log(`   - Nome: ${orcamento.nome}`);
    console.log(`   - Valor Total: R$ ${parseFloat(orcamento.valor_total).toLocaleString('pt-BR')}`);
    console.log(`   - Cliente: ${orcamento.cliente_nome}`);
    console.log(`   - Status: ${orcamento.status}`);
    
    // Verificar estrutura dos dados JSON
    console.log('\nüìä AN√ÅLISE DOS CAMPOS JSON:');
    console.log(`   - Disciplinas (tipo): ${typeof orcamento.disciplinas}`);
    console.log(`   - Disciplinas (valor):`, orcamento.disciplinas);
    console.log(`   - Cronograma (tipo): ${typeof orcamento.cronograma}`);
    console.log(`   - Composi√ß√£o Financeira (tipo): ${typeof orcamento.composicao_financeira}`);
    console.log(`   - Proposta (tipo): ${typeof orcamento.proposta}`);
    
    // Verificar se s√£o objetos v√°lidos (n√£o strings)
    const disciplinasOk = Array.isArray(orcamento.disciplinas) || typeof orcamento.disciplinas === 'object';
    const cronogramaOk = typeof orcamento.cronograma === 'object' && orcamento.cronograma !== null;
    const composicaoOk = typeof orcamento.composicao_financeira === 'object';
    const propostaOk = typeof orcamento.proposta === 'object';
    
    console.log('\n‚úÖ VALIDA√á√ÉO DOS DADOS:');
    console.log(`   - Disciplinas v√°lidas: ${disciplinasOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Cronograma v√°lido: ${cronogramaOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Composi√ß√£o v√°lida: ${composicaoOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Proposta v√°lida: ${propostaOk ? '‚úÖ' : '‚ùå'}`);
    
    if (disciplinasOk && cronogramaOk && composicaoOk && propostaOk) {
      console.log('\nüéâ SUCESSO TOTAL!');
      console.log('‚úÖ Todos os dados est√£o em formato correto');
      console.log('‚úÖ O frontend n√£o deve mais ter erro de JSON.parse');
      console.log('‚úÖ O or√ßamento 63 deve carregar perfeitamente na p√°gina');
    } else {
      console.log('\n‚ö†Ô∏è AINDA H√Å PROBLEMAS:');
      console.log('‚ùå Alguns dados ainda est√£o em formato incorreto');
      console.log('‚ùå Pode haver erro de JSON.parse no frontend');
    }
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      message: error.message
    });
  }
}

testeFinalOrcamento63();