/**
 * ‚öôÔ∏è HOOK PARA SINCRONIZA√á√ÉO COM CONFIGURA√á√ïES
 * 
 * Respons√°vel por:
 * - Carregar configura√ß√µes da Tabela de Pre√ßos
 * - Sincronizar disciplinas ativas
 * - Detectar mudan√ßas em tempo real
 * - Manter consist√™ncia entre p√°ginas
 */

import { useState, useEffect, useCallback } from 'react';
import { ConfigurationData } from '../types/configuration';

interface UseConfigurationSyncReturn {
  configurations: ConfigurationData | null;
  activeDisciplines: string[];
  loading: boolean;
  error: string | null;
  syncWithConfigurations: () => Promise<void>;
}

export function useConfigurationSync(budgetId: string): UseConfigurationSyncReturn {
  const [configurations, setConfigurations] = useState<ConfigurationData | null>(null);
  const [activeDisciplines, setActiveDisciplines] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  /**
   * üîÑ CARREGAR CONFIGURA√á√ïES DA TABELA DE PRE√áOS
   */
  const fetchConfigurations = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('‚öôÔ∏è Carregando configura√ß√µes da Tabela de Pre√ßos...');

      // Carregar configura√ß√µes do escrit√≥rio
      const escritorioId = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'; // ID padr√£o
      const response = await fetch(`/api/escritorios/${escritorioId}/configuracoes`);
      
      if (!response.ok) {
        throw new Error(`Erro ao carregar configura√ß√µes: ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Erro ao carregar configura√ß√µes');
      }

      setConfigurations(result.data);

      // Extrair disciplinas ativas
      const activeDisc = Object.entries(result.data.disciplinas || {})
        .filter(([_, config]: [string, any]) => config.ativo)
        .map(([code, _]) => code);

      setActiveDisciplines(activeDisc);

      console.log('‚úÖ Configura√ß√µes carregadas:', {
        disciplinasAtivas: activeDisc.length,
        totalConfiguracoes: Object.keys(result.data.disciplinas || {}).length
      });

    } catch (error: any) {
      console.error('‚ùå Erro ao carregar configura√ß√µes:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  }, []); // ‚úÖ CORRE√á√ÉO: Depend√™ncias vazias para evitar re-cria√ß√£o

  /**
   * üîÑ CARREGAR DISCIPLINAS ESPEC√çFICAS DO OR√áAMENTO
   */
  const fetchBudgetDisciplines = useCallback(async () => {
    if (!budgetId) return;

    try {
      console.log('üìã Carregando disciplinas espec√≠ficas do or√ßamento...');

      const response = await fetch(`/api/orcamentos/${budgetId}/disciplinas`);
      
      if (response.ok) {
        const result = await response.json();
        
        if (result.success && result.data.disciplinasAtivas) {
          // Usar disciplinas espec√≠ficas do or√ßamento se existirem
          setActiveDisciplines(result.data.disciplinasAtivas);
          console.log('‚úÖ Disciplinas espec√≠ficas do or√ßamento carregadas:', result.data.disciplinasAtivas);
          return;
        }
      }

      // Fallback: usar disciplinas das configura√ß√µes globais
      console.log('‚ö†Ô∏è Usando disciplinas das configura√ß√µes globais como fallback');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar disciplinas espec√≠ficas, usando configura√ß√µes globais:', error);
    }
  }, [budgetId]);

  /**
   * üîÑ SINCRONIZA√á√ÉO COMPLETA - VERS√ÉO EST√ÅVEL
   */
  const syncWithConfigurations = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Carregar configura√ß√µes
      const escritorioId = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';
      const configResponse = await fetch(`/api/escritorios/${escritorioId}/configuracoes`);
      
      if (configResponse.ok) {
        const configResult = await configResponse.json();
        if (configResult.success) {
          setConfigurations(configResult.data);
          
          // Extrair disciplinas ativas das configura√ß√µes
          const activeDisc = Object.entries(configResult.data.disciplinas || {})
            .filter(([_, config]: [string, any]) => config.ativo)
            .map(([code, _]) => code);
          
          setActiveDisciplines(activeDisc);
        }
      }

      // Tentar carregar disciplinas espec√≠ficas do or√ßamento
      if (budgetId) {
        const budgetResponse = await fetch(`/api/orcamentos/${budgetId}/disciplinas`);
        if (budgetResponse.ok) {
          const budgetResult = await budgetResponse.json();
          if (budgetResult.success && budgetResult.data.disciplinasAtivas) {
            setActiveDisciplines(budgetResult.data.disciplinasAtivas);
          }
        }
      }

    } catch (error: any) {
      console.error('‚ùå Erro na sincroniza√ß√£o:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  }, [budgetId]); // ‚úÖ CORRE√á√ÉO: Apenas budgetId como depend√™ncia

  // ‚úÖ CORRE√á√ÉO: Carregar apenas uma vez na inicializa√ß√£o
  useEffect(() => {
    let isMounted = true;
    
    const loadInitialData = async () => {
      if (!isMounted || !budgetId) return;
      
      try {
        setLoading(true);
        setError(null);

        console.log('‚öôÔ∏è Carregando configura√ß√µes iniciais...');

        // Carregar configura√ß√µes
        const escritorioId = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';
        const configResponse = await fetch(`/api/escritorios/${escritorioId}/configuracoes`);
        
        if (configResponse.ok && isMounted) {
          const configResult = await configResponse.json();
          if (configResult.success) {
            setConfigurations(configResult.data);
            
            // Extrair disciplinas ativas das configura√ß√µes
            const activeDisc = Object.entries(configResult.data.disciplinas || {})
              .filter(([_, config]: [string, any]) => config.ativo)
              .map(([code, _]) => code);
            
            setActiveDisciplines(activeDisc);
          }
        }

        // Tentar carregar disciplinas espec√≠ficas do or√ßamento
        const budgetResponse = await fetch(`/api/orcamentos/${budgetId}/disciplinas`);
        if (budgetResponse.ok && isMounted) {
          const budgetResult = await budgetResponse.json();
          if (budgetResult.success && budgetResult.data.disciplinasAtivas) {
            setActiveDisciplines(budgetResult.data.disciplinasAtivas);
          }
        }

        console.log('‚úÖ Configura√ß√µes iniciais carregadas');

      } catch (error: any) {
        if (isMounted) {
          console.error('‚ùå Erro ao carregar configura√ß√µes iniciais:', error);
          setError(error.message);
        }
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };
    
    loadInitialData();
    
    return () => {
      isMounted = false;
    };
  }, [budgetId]); // ‚úÖ CORRE√á√ÉO: Depend√™ncia apenas do budgetId

  // ‚ùå REMOVIDO: Polling autom√°tico que causava loop infinito
  // O polling ser√° implementado apenas quando necess√°rio via user action

  return {
    configurations,
    activeDisciplines,
    loading,
    error,
    syncWithConfigurations
  };
}