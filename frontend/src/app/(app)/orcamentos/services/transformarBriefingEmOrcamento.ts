import type { BriefingCompleto, OrcamentoDetalhado } from "./types";
import { calcularOrcamento } from "./calcularOrcamento";

// 游꿢 FUN칂츾O ORQUESTRADORA: TRANSFORMA BRIEFING EM OR칂AMENTO DETALHADO
export async function transformarBriefingEmOrcamento(briefing: BriefingCompleto): Promise<OrcamentoDetalhado> {
  console.log('游꿢 Transformando briefing em or칞amento:', briefing);
  
  // Simula칞칚o de consulta ao CUB (poderia ser API ou banco de dados)
  const cub = await consultarCUB(briefing.localizacao || "SP");
  // Simula칞칚o de consulta ao hist칩rico do escrit칩rio
  const historico = await consultarHistoricoProjetos(briefing.perfilCliente);

  // 游늵 PREPARAR BRIEFING COM DADOS EXTRA칈DOS
  const briefingCompleto = {
    ...briefing,
    // Garantir que os dados extra칤dos estejam dispon칤veis
    dadosExtraidos: (briefing as any).dadosExtraidos || briefing
  };

  console.log('游늵 Briefing preparado para c치lculo:', briefingCompleto);

  // Chama o servi칞o de c치lculo com dados reais
  const orcamento = calcularOrcamento(briefingCompleto, cub, historico);
  
  console.log('游눯 Or칞amento calculado:', orcamento);
  
  return orcamento;
}

// Fun칞칚o mock para consulta ao CUB
async function consultarCUB(uf: string): Promise<number> {
  // Exemplo: valores fict칤cios por estado
  const cubs: Record<string, number> = {
    SP: 2500,
    RJ: 2600,
    MG: 2400,
    RS: 2300,
    BA: 2200,
  };
  return cubs[uf] || 2500;
}

// Fun칞칚o mock para consulta ao hist칩rico
async function consultarHistoricoProjetos(perfilCliente: string): Promise<any[]> {
  // Retorna array vazio por enquanto
  return [];
} 